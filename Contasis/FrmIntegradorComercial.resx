<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="txtdocumento.Text" xml:space="preserve">
    <value>CREATE TABLE com_documento (
	iddocumento numeric(20,0),
	ccod_empresa character(3),
	cper character(4),
	cmes character(2),
	ccodmodulo character(6),
	ccodmov character(5),
	ccoddoc character(2),
	cserie character(20),
	cnumero character(20),
	ccodenti character(11),
	cdesenti character varying(100),
	ccodtipent character(3),
	ccodruc character(15),
	crazsoc character(150),
	cdirecc character varying(250),
	ccodubi character(6),
	ccodcontac character(3),
	cdescontacto character(150),
	ffecha date,
	ffechaven date,
	ffechaalm date,
	ccodpag character(2),
	cmoneda character(1),
	ntcigv numeric(10,6),
	cguiaser character(7),
	cguianum character(13),
	mdsc text,
	ccodvend character(4),
	ccodclas character(1),
	ccodcon character(4),
	cnumordc character(20),
	crefdoc character(2),
	freffec date,
	crefser character(10),
	crefnum character(13),
	ccat09 character(2),
	cmotinc character(50),
	nresp numeric(1,0),
	ccodpds character(5),
	nporre numeric(5,2),
	ffecre date,
	cnumdere character(15),
	ccodpps character(2),
	nporre2 numeric(5,2),
	nperdenre numeric(1,0),
	nbase1 numeric(15,2),
	nigv1 numeric(15,2),
	nbase2 numeric(15,2),
	nigv2 numeric(15,2),
	nbase3 numeric(15,2),
	nigv3 numeric(15,2) ,
	nimpicbper numeric(15,2),
	nina numeric(15,2),
	nexo numeric(15,2),
	nisc numeric(15,2),
	nivabase numeric(15,2),
	nivaimp numeric(15,2),
	nimpant numeric(15,2),
	ntot numeric(15,2),
	created_at timestamp,
	updated_at timestamp,
	estado character varying(255),
	en_ambiente_de character varying(255),
	es_con_migracion numeric(1, 0)  default 0,
	ccodcos3 character(15),	
	ccodrucanula character(15),
	obserror text,
	resultado_migracion numeric(1, 0),
	nflgexisteanular integer NOT NULL DEFAULT 0,
	constraint pk_documento PRIMARY KEY (iddocumento)
);</value>
  </data>
  <data name="txtdetalledocu.Text" xml:space="preserve">
    <value>
CREATE TABLE com_detalledocumento (
	iddetalledocumento numeric(20, 0) not null,
	ccodalma character(3),
	ccodprod character(20),
	ccodmed character(15),
	ccodlote character(20),
	nuniori numeric(20,10),
	nvvori numeric(20,10),
	npvori numeric(20,10),
	nvalor numeric(15,2),
	nigvtot numeric(15,2),
	ntotori numeric(15,2),
	npigv numeric(5,2),
	nconvnum numeric(9,2),
	nconvden numeric(9,2),
	clibprod character(1),
	ccodcos character(9),
	ccodcos2 character(9),
	ccodpresu character(10),
	cctaprod character(20),
	npordscu numeric(15,2),
	ndsctos numeric(15,2),
	ccodisc character(5),
	nporisc numeric(5,2),
	nisc numeric(15,2),
	tipo_isc numeric(1,0),
	mdscl text,
	iddocumento int not null,
	constraint pk_detalle_documento PRIMARY KEY (iddetalledocumento),
	constraint fk_detalle_documento FOREIGN KEY (iddocumento) references com_documento(iddocumento)
);</value>
  </data>
  <data name="txtproducto.Text" xml:space="preserve">
    <value>CREATE TABLE com_producto (
	idproducto numeric(20,0) not null,
	ccod_empresa character(3),
	cper character(4),
	cmes character(2),
	ccodmodulo character(6),
	ccodfamg character(20),
	cdesfamg character(50),
	ccodfamf character(20),
	cdesfamf character(50),
	ccodprod character(20),
	cdesprod character(150),
	cdesprodGen character varying(500),
	ccodtes character(2),
	cdesmar character(80),
	ccodmed character(15),
	ccodcatbs character(8),
	cdescatbs character(100),
	ntipoprod character(8),
	nunidsec character(2),
	npesoprod numeric(10,4),
	ccodbarras character(15),
	ninprod character(2),
	nanuprod character(2),
	nlote character(2),
	nseruni character(2),
	nicbper character(2),
	nprodanti character(2),
	ngasrela character(2),
	nprodsafniif character(2),
	ccomcue character(20),
	cvencue character(20),
	cdebicue character(20),
	ccredcue character(20),
	cdebicuei character(20),
	ccredcuei character(20),
	ccodcos character(9),
	ccodcos2 character(9),
	ccodpresu character(10),
	ccomprod character(1),
	cvenprod character(1),
	ccodisc character(5),
	cmoneda character(1),
	npreunit1 numeric(15,4),
	npreunit2 numeric(15,4),
	npreunit3 numeric(15,4),
	npreunit4 numeric(15,4),
	npreunit5 numeric(15,4),
	npreunit6 numeric(15,4),
	npreunit7 numeric(15,4),
	npreunit8 numeric(15,4),
	npreunit9 numeric(15,4),
	npreunit10 numeric(15,4),
	npreunit11 numeric(15,4),
	npreunit12 numeric(15,4),
	npreunit13 numeric(15,4),
	npreunit14 numeric(15,4),
	npreunit15 numeric(15,4),
	nstockmin numeric(15,4),
	nstockmax numeric(15,4),
	nrango1 numeric(15,0),
	nrango2 numeric(15,0),
	nresp numeric(1,0),
	ccodpps character(2),
	ccodpds character(5),
	nagemonmin numeric(15,2),
	ccodlabora character(4),
	cdeslabora character(60),
	
	estado varchar(255),
	en_ambiente_de varchar(255),
	es_con_migracion numeric(1,0),
	ccodcos3 nchar(15),
	obserror text,
	resultado_migracion numeric(1, 0)
);</value>
  </data>
  <data name="txtguardardocu.Text" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION public.func_guardar_com_documento(
	OUT resultado text,
	IN pjson text,
	IN ptipo character(2)
)
RETURNS text AS
$BODY$
declare 
	a_json json;
	a_documento json;
	a_detalle json;
begin
	/* Tipo:
	01: Venta
	02: Compra
	*/
    -- 0. Truncar tabla
    truncate table com_detalledocumento;
	truncate table com_documento cascade;
    a_json		:= pjson::json;
	a_documento	:= a_json-&gt;'documentos';
	a_detalle	:= a_json-&gt;'detalles';
    -- 1. Importar datos
    INSERT INTO com_documento(
		iddocumento, ccod_empresa, cper, cmes,
		ccodmodulo, ccodmov, ccoddoc,
		cserie, cnumero, ccodenti, cdesenti, ccodtipent, ccodruc, crazsoc, cdirecc, ccodubi,
		ccodcontac, cdescontacto, ffecha, ffechaven, ffechaalm, ccodpag, cmoneda, ntcigv,
		cguiaser, cguianum, mdsc, ccodvend, ccodclas, ccodcon, cnumordc, crefdoc, freffec,
		crefser, crefnum, ccat09, cmotinc, nresp, ccodpds, nporre, ffecre, cnumdere, ccodpps,
		nporre2, nperdenre, nbase1, nigv1, nbase2, nigv2, nbase3, nigv3, nimpicbper, nina, nexo,
		nisc, nivabase, nivaimp, nimpant, ntot, estado, en_ambiente_de,
		es_con_migracion, ccodcos3, ccodrucanula
    )
    select
		iddocumento, ccod_empresa, cper, cmes,
		coalesce(ccodmodulo,'') as ccodmodulo,
		coalesce(ccodmov,'') as ccodmov,
		coalesce(ccoddoc,'') as ccoddoc,
		coalesce(cserie,'') as cserie,
		coalesce(cnumero,'') as cnumero,
		coalesce(ccodenti,'') as ccodenti,
		coalesce(cdesenti,'') as cdesenti,
		coalesce(ccodtipent,'') as ccodtipent,
		coalesce(ccodruc,'') as ccodruc,
		coalesce(crazsoc,'') as crazsoc,
		coalesce(cdirecc,'') as cdirecc,
		coalesce(ccodubi,'') as ccodubi,
		coalesce(ccodcontac,'') as ccodcontac,
		coalesce(cdescontacto,'') as cdescontacto,
		ffecha,
		ffechaven,
		ffechaalm,
		coalesce(ccodpag,'') as ccodpag,
		coalesce(cmoneda,'') as cmoneda,
		coalesce(ntcigv,0.0) as ntcigv,
		coalesce(cguiaser,'') as cguiaser,
		coalesce(cguianum,'') as cguianum,
		coalesce(mdsc,'') as mdsc,
		coalesce(ccodvend,'') as ccodvend,
		coalesce(ccodclas,'') as ccodclas,
		coalesce(ccodcon,'') as ccodcon,
		coalesce(cnumordc,'') as cnumordc,
		coalesce(crefdoc,'') as crefdoc,
		freffec,
		coalesce(crefser,'') as crefser,
		coalesce(crefnum,'') as crefnum,
		coalesce(ccat09,'') as ccat09,
		coalesce(cmotinc,'') as cmotinc,
		coalesce(nresp,0.0) as nresp,
		coalesce(ccodpds,'') as ccodpds,
		coalesce(nporre,0.0) as nporre,
		ffecre,
		coalesce(cnumdere,'') as cnumdere,
		coalesce(ccodpps,'') as ccodpps,
		coalesce(nporre2,0.0) as nporre2,
		coalesce(nperdenre,0.0) as nperdenre,
		coalesce(nbase1,0.0) as nbase1,
		coalesce(nigv1,0.0) as nigv1,
		coalesce(nbase2,0.0) as nbase2,
		coalesce(nigv2,0.0) as nigv2,
		coalesce(nbase3,0.0) as nbase3,
		coalesce(nigv3,0.0) as nigv3,
		coalesce(nimpicbper,0.0) as nimpicbper,
		coalesce(nina,0.0) as nina,
		coalesce(nexo,0.0) as nexo,
		coalesce(nisc,0.0) as nisc,
		coalesce(nivabase,0.0) as nivabase,
		coalesce(nivaimp,0.0) as nivaimp,
		coalesce(nimpant,0.0) as nimpant,
		coalesce(ntot,0.0) as ntot,
		estado,
		en_ambiente_de,
		es_con_migracion,
		coalesce(ccodcos3,'') as ccodcos3,
		coalesce(ccodrucanula,'') as ccodrucanula
    from json_to_recordset(a_documento)
    as t (
        iddocumento numeric,
		ccodrucemisor character(15),
		ccod_empresa character(3),
		cper character(4),
		cmes character(2),
		ccodmodulo character(6),
		ccodmov character(5),
		ccoddoc character(2),
		cserie character(20),
		cnumero character(20),
		ccodenti character(11),
		cdesenti character varying(100),
		ccodtipent character(3),
		ccodruc character(15),
		crazsoc character(150),
		cdirecc character varying(250),
		ccodubi character(6),
		ccodcontac character(3),
		cdescontacto character(150),
		ffecha date,
		ffechaven date,
		ffechaalm date,
		ccodpag character(2),
		cmoneda character(1),
		ntcigv numeric(10,6),
		cguiaser character(7),
		cguianum character(13),
		mdsc text,
		ccodvend character(4),
		ccodclas character(1),
		ccodcon character(4),
		cnumordc character(20),
		crefdoc character(2),
		freffec date,
		crefser character(10),
		crefnum character(13),
		ccat09 character(2),
		cmotinc character(50),
		nresp numeric(1,0),
		ccodpds character(5),
		nporre numeric(5,2),
		ffecre date,
		cnumdere character(15),
		ccodpps character(2),
		nporre2 numeric(5,2),
		nperdenre numeric(1,0),
		nbase1 numeric(15,2),
		nigv1 numeric(15,2),
		nbase2 numeric(15,2),
		nigv2 numeric(15,2),
		nbase3 numeric(15,2),
		nigv3 numeric(15,2) ,
		nimpicbper numeric(15,2),
		nina numeric(15,2),
		nexo numeric(15,2),
		nisc numeric(15,2),
		nivabase numeric(15,2),
		nivaimp numeric(15,2),
		nimpant numeric(15,2),
		ntot numeric(15,2),
		created_at timestamp,
		updated_at timestamp,
		estado character varying(255),
		en_ambiente_de character varying(255),
		es_con_migracion numeric(1, 0),
		ccodcos3 character(15),	
		ccodrucanula character(15)
    );
	
	-- 2. Insert detalle
	INSERT INTO public.com_detalledocumento(
		iddetalledocumento, ccodalma, ccodprod, ccodmed, ccodlote, nuniori,
		nvvori, npvori, nvalor, nigvtot, ntotori, npigv, nconvnum, nconvden,
		clibprod, ccodcos, ccodcos2, ccodpresu, cctaprod, npordscu, ndsctos,
		ccodisc, nporisc, nisc, tipo_isc, mdscl, iddocumento
	)
	select
		dd.iddetalledocumento,
		coalesce(dd.ccodalma,'') as ccodalma,
		coalesce(dd.ccodprod,'') as ccodprod,
		coalesce(dd.ccodmed,'') as ccodmed,
		coalesce(dd.ccodlote,'') as ccodlote,
		coalesce(dd.nuniori,0.0) as nuniori,
		coalesce(dd.nvvori,0.0) as nvvori,
		coalesce(dd.npvori,0.0) as npvori,
		coalesce(dd.nvalor,0.0) as nvalor,
		coalesce(dd.nigvtot,0.0) as nigvtot,
		coalesce(dd.ntotori,0.0) as ntotori,
		coalesce(dd.npigv,0.0) as npigv,
		coalesce(dd.nconvnum,0.0) as nconvnum,
		coalesce(dd.nconvden,0.0) as nconvden,
		coalesce(dd.clibprod,'') as clibprod,
		coalesce(dd.ccodcos,'') as ccodcos,
		coalesce(dd.ccodcos2,'') as ccodcos2,
		coalesce(dd.ccodpresu,'') as ccodpresu,
		coalesce(dd.cctaprod,'') as cctaprod,
		coalesce(dd.npordscu,0.0) as npordscu,
		coalesce(dd.ndsctos,0.0) as ndsctos,
		coalesce(dd.ccodisc,'') as ccodisc,
		coalesce(dd.nporisc,0.0) as nporisc,
		coalesce(dd.nisc,0.0) as nisc,
		coalesce(dd.tipo_isc,0.0) as tipo_isc,
		coalesce(dd.mdscl,'') as mdscl,
		dd.iddocumento
	from json_to_recordset(a_detalle)
    as dd (
		iddetalledocumento numeric(20,0),
		ccodalma character(3),
		ccodprod character(20),
		ccodmed character(15),
		ccodlote character(20),
		nuniori numeric(20,10),
		nvvori numeric(20,10),
		npvori numeric(20,10),
		nvalor numeric(15,2),
		nigvtot numeric(15,2),
		ntotori numeric(15,2),
		npigv numeric(5,2),
		nconvnum numeric(9,2),
		nconvden numeric(9,2),
		clibprod character(1),
		ccodcos character(9),
		ccodcos2 character(9),
		ccodpresu character(10),
		cctaprod character(20),
		npordscu numeric(15,2),
		ndsctos numeric(15,2),
		ccodisc character(5),
		nporisc numeric(5,2),
		nisc numeric(15,2),
		tipo_isc numeric(1,0),
		mdscl text,
		iddocumento integer
	);

    --3. Validar/generar registros | 01: Venta - 02: Compra
	if(ptipo='01')then
		-- perform com_ventas_integracion_principal(); -- Crear funcion...
	elsif(ptipo='02')then
		-- perform com_compras_integracion_principal(); -- Crear funcion...
	end if;

	--3.1 Test.. (Eliminar cuando las funciones anteriores (2) ya esten creadas)
    update com_documento set obserror='Test Habilitado '||iddocumento, resultado_migracion=2;

    --4. Informe de importacion    
    select json_agg(json_build_object(
        'id', t.iddocumento,
		'obserror', t.obserror,
		'es_con_migracion', t.es_con_migracion,
		'resultado_migracion', t.resultado_migracion
    ))::text
    from com_documento t
    into resultado;	
    
end; 
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;</value>
  </data>
  <data name="txtguardarproducto.Text" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION public.func_guardar_com_producto(
	OUT resultado text,
	IN pjson text
)
RETURNS text AS
$BODY$
declare 
	a_json json;
begin
    -- 0. Truncar tabla
    truncate table com_producto;
    a_json = pjson::json;
    -- 1. Importar datos
    INSERT INTO com_producto(
		idproducto, ccod_empresa, cper, cmes,
		ccodmodulo, ccodfamg, cdesfamg, ccodfamf, cdesfamf, ccodprod, cdesprod,
		cdesprodgen, ccodtes, cdesmar, ccodmed, ccodcatbs, cdescatbs, ntipoprod,
		nunidsec, npesoprod, ccodbarras, ninprod, nanuprod, nlote, nseruni, nicbper,
		nprodanti, ngasrela, nprodsafniif, ccomcue, cvencue, cdebicue, ccredcue, cdebicuei,
		ccredcuei, ccodcos, ccodcos2, ccodpresu, ccomprod, cvenprod, ccodisc, cmoneda,
		npreunit1, npreunit2, npreunit3, npreunit4, npreunit5, npreunit6, npreunit7,
		npreunit8, npreunit9, npreunit10, npreunit11, npreunit12, npreunit13, npreunit14,
		npreunit15, nstockmin, nstockmax, nrango1, nrango2, nresp, ccodpps, ccodpds,
		nagemonmin, ccodlabora, cdeslabora, estado, en_ambiente_de, es_con_migracion,
		ccodcos3
    )
    select
		idproducto, ccod_empresa, cper, cmes,
		coalesce(ccodmodulo, ''),
		coalesce(ccodfamg, ''),
		coalesce(cdesfamg, ''),
		coalesce(ccodfamf, ''),
		coalesce(cdesfamf, ''),
		coalesce(ccodprod, ''),
		coalesce(cdesprod, ''),
		coalesce(cdesprodGen, ''),
		coalesce(ccodtes, ''),
		coalesce(cdesmar, ''),
		coalesce(ccodmed, ''),
		coalesce(ccodcatbs, ''),
		coalesce(cdescatbs, ''),
		coalesce(ntipoprod, ''),
		coalesce(nunidsec, ''),
		coalesce(npesoprod, 0.00),
		coalesce(ccodbarras, ''),
		coalesce(ninprod, ''),
		coalesce(nanuprod, ''),
		coalesce(nlote, ''),
		coalesce(nseruni, ''),
		coalesce(nicbper, ''),
		coalesce(nprodanti, ''),
		coalesce(ngasrela, ''),
		coalesce(nprodsafniif, ''),
		coalesce(ccomcue, ''),
		coalesce(cvencue, ''),
		coalesce(cdebicue, ''),
		coalesce(ccredcue, ''),
		coalesce(cdebicuei, ''),
		coalesce(ccredcuei, ''),
		coalesce(ccodcos, ''),
		coalesce(ccodcos2, ''),
		coalesce(ccodpresu, ''),
		coalesce(ccomprod, ''),
		coalesce(cvenprod, ''),
		coalesce(ccodisc, ''),
		coalesce(cmoneda, ''),
		coalesce(npreunit1, 0.00),
		coalesce(npreunit2, 0.00),
		coalesce(npreunit3, 0.00),
		coalesce(npreunit4, 0.00),
		coalesce(npreunit5, 0.00),
		coalesce(npreunit6, 0.00),
		coalesce(npreunit7, 0.00),
		coalesce(npreunit8, 0.00),
		coalesce(npreunit9, 0.00),
		coalesce(npreunit10, 0.00),
		coalesce(npreunit11, 0.00),
		coalesce(npreunit12, 0.00),
		coalesce(npreunit13, 0.00),
		coalesce(npreunit14, 0.00),
		coalesce(npreunit15, 0.00),
		coalesce(nstockmin, 0.00),
		coalesce(nstockmax, 0.00),
		coalesce(nrango1, 0.00),
		coalesce(nrango2, 0.00),
		coalesce(nresp, 0.00),
		coalesce(ccodpps, ''),
		coalesce(ccodpds, ''),
		coalesce(nagemonmin, 0.00),
		coalesce(ccodlabora, ''),
		coalesce(cdeslabora, ''),
		coalesce(estado, ''),
		en_ambiente_de,
		es_con_migracion,
		coalesce(ccodcos3, '')
    from json_to_recordset(a_json)
    as t (
		idproducto numeric(20,0),
		--
		ccodrucemisor character(15),
		ccod_empresa character(3),
		cper character(4),
		cmes character(2),
		ccodmodulo character(6),
		--
		ccodfamg character(20),
		cdesfamg character(50),
		ccodfamf character(20),
		cdesfamf character(50),
		ccodprod character(20),
		cdesprod character(150),
		cdesprodGen character varying(500),
		ccodtes character(2),
		cdesmar character(80),
		ccodmed character(15),
		ccodcatbs character(8),
		cdescatbs character(100),
		ntipoprod character(8),
		nunidsec character(2),
		npesoprod numeric(10,4),
		ccodbarras character(15),
		ninprod character(2),
		nanuprod character(2),
		nlote character(2),
		nseruni character(2),
		nicbper character(2),
		nprodanti character(2),
		ngasrela character(2),
		nprodsafniif character(2),
		ccomcue character(20),
		cvencue character(20),
		cdebicue character(20),
		ccredcue character(20),
		cdebicuei character(20),
		ccredcuei character(20),
		ccodcos character(9),
		ccodcos2 character(9),
		ccodpresu character(10),
		ccomprod character(1),
		cvenprod character(1),
		ccodisc character(5),
		cmoneda character(1),
		npreunit1 numeric(15,4),
		npreunit2 numeric(15,4),
		npreunit3 numeric(15,4),
		npreunit4 numeric(15,4),
		npreunit5 numeric(15,4),
		npreunit6 numeric(15,4),
		npreunit7 numeric(15,4),
		npreunit8 numeric(15,4),
		npreunit9 numeric(15,4),
		npreunit10 numeric(15,4),
		npreunit11 numeric(15,4),
		npreunit12 numeric(15,4),
		npreunit13 numeric(15,4),
		npreunit14 numeric(15,4),
		npreunit15 numeric(15,4),
		nstockmin numeric(15,4),
		nstockmax numeric(15,4),
		nrango1 numeric(15,0),
		nrango2 numeric(15,0),
		nresp numeric(1,0),
		ccodpps character(2),
		ccodpds character(5),
		nagemonmin numeric(15,2),
		ccodlabora character(4),
		cdeslabora character(60),
		
		estado varchar(255),
		en_ambiente_de varchar(255),
		es_con_migracion numeric(1,0),
		ccodcos3 nchar(15)
    );
	--
   
	--2.1 Test.. (Eliminar cuando las funciones anteriores (2) ya esten creadas)
    update com_producto set obserror='Test Habilitado '||idproducto, resultado_migracion=2;

    --3. Informe de importacion    
    select json_agg(json_build_object(
        'id', t.idproducto,
		'obserror', t.obserror,
		'es_con_migracion', t.es_con_migracion,
		'resultado_migracion', t.resultado_migracion
    ))::text
    from com_producto t
    into resultado;	
    
end; 
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
</value>
  </data>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMtQAQDLUAEOy1ABRstQAZHLUAHPy1AB9ctQ
        Af/LUAH/y1AB/8tQAf/MUQH1zFEB0MxRAZbMUQFKy1ABD8xRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMtQAQDLUAEMy1ABVMtQAbbLUAHvy1AB/stQ
        Af/LUAH/zVIB/85UAv/PVgL/0FgC/9BYAv/QWAP/0FgD/9BYA/DRWQO50loDWdJbAw3SWwMAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMtQAQDLUAEAy1ABL8tQAanLUAH2y1AB/8tQ
        Af/MUQH/zlQC/9BYAv/SWgP/0lsD/9JbA//SWwP/0lsD/9JbA//SWwP/0lsD/9NaAv/UWgL31FkCrddY
        ATL/KAAA4FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADLUAEAy1ABAstQAVDLUAHYy1AB/8tQ
        Af/LUAH/zlQC/9FYA//SWwP/0lsD/9JbA//SWwP/0lsD/9JbA//SWwP/1FoD/9VcA//OYgj/w2oM/7dx
        D/+5bg7/wWgK3MhiB1TyPwAC2lQBAAAAAAAAAAAAAAAAAAAAAAAAAAAAy1ABAMtQAQHLUAFdy1AB6ctQ
        Af/LUAH/zFEB/89WAv/SWwP/0lsD/9JbA//SWwP/0lsD/9JbA//SWwP/1V0D/9hjBv/GdhL/mJUh/2mu
        L/9NuzX/Q782/0K9N/9OtTL/X6gs6ku0MV0A91YCMMM7AAAAAAAAAAAAAAAAAMtQAQDLUAEAy1ABS8tQ
        AejLUAH/y1AB/8xRAv/QWAP/0lsD/9JbA//SWwP/0lsD/9JbA//SWwP/1F0D/9tjBf/Vcg7/opck/166
        Nf83yTv/Lso7/y/JO/8wyDv/MMc8/y/HO/8wxjz/MMQ66TDDO1MwxT4AMMI5AAAAAAAAAAAAy1ABAMtQ
        ASjLUAHTy1AB/8tQAf/MUQH/0FgD/9JbA//SWwP/0lsD/9JbA//SWwP/0lsD/9ZfBP/gaAf/13QP/46d
        K/9OvDn/Msg7/zDJOv8wyTr/Mcg7/zHHOv8xxjv/McY6/zHFO/8wxDr/MMM62DDCOS4wwjkAAAAAAMtQ
        AQDLUAEHy1ABnctQAf/LUAH/y1EB/9BXAv/SWwP/0lsD/9JbA//SWwP/0lsD/9JbA//XYQX/4msJ/+Nu
        DP+fkiX/VrQ4/zO8Of8wvzr/MMM6/zDGOv8xyDv/Mcc6/zHGO/8xxjr/McU7/zDEOv8wwzr/MMI5pTHB
        OwoxwTsAy1ABAMtQAUXLUAHwy1AB/8tQAf/PVQP/0lsD/9JbA//SWwP/0lsD/9JbA//SWwP/12AF/+Jr
        Cv/mbA3/yHwZ/2utNP8/uzn/ML86/zHAOv8xwDr/MMI6/zDFO/8xxzv/McY7/zHGOv8xxTv/MMQ6/zDD
        Ov8wwjrzMcE7TTHBOwDLUAEIy1ABpctQAf/LUAH/zFIB/9FaA//SWwP/0lsD/9JbA//SWwP/0lsD/9Vd
        BP/haQr/5WwP/+VrEP+ZlSX/Urk3/zW/Of8xwTr/MMI6/zDDOv8wxDv/McU6/zHGO/8xxjv/McY6/zHF
        O/8wxDr/MMM6/zDCOv8xwTqsMb84CstQATbLUAHly1AB/8tQAf/PVwL/0lsD/9JbA//SWwP/0lsD/9Jb
        A//SWwP/3WUK/+VrEP/maw7/3HAQ/HWpL+pGvjnnMsI67zDDOvwwxDv/McU7/zHFO/8xxjv/Mcc7/zHH
        O/8xxjr/McU7/zDEOv8wwzr/MMI6/zHAOukxwDk7y1ABdstQAf3LUAH/zFIC/9FaA//SWwP/0lsD/9Jb
        A//SWwP/0lsC/9dfBf/kag3/5WsN/+VqDf/ibA/Wh54pOjzDOigwwzo3MMQ6XDHFO5sxxjvfMcc7/jHI
        O/8wyTr/Mck6/zHJO/8xxTv/MMQ6/zDDOv8wwjr/McA6/jHAOYLLUAGwy1AB/8tQAf/OVQL/0lsD/9Jb
        Av/SWwL/01wB/9NcAP/TXAD/3WUH/+VrDf/lag3/5moN/+ZpDsPmaA4P5mgOAAAAAAAxxjsAMcY7AzHH
        OygxyDuNMMk67THKOv8xyzv/Mcs7/zHIO/8wxDr/MMM6/zDCOv8xwDr/McA6vstQAdbLUAH/y1AB/9FY
        Af/TXAD/01wA/9NcAP/TXAD/01wA/9VdAf/iaAv/5moO/+ZpDv/maBD/5mgSxeZoEhDmaBIAAAAAAAAA
        AAAAAAAAMMo5AC/JOQQxyjtRMcs73DHMO/8xzTv/Mcw7/zDGOv8wwzr/MMI6/zHAOv8xvzrly1AB68tQ
        Af/MUQH/0loA/9NcAP/TXAD/01wA/9NcAP/TXAH/2GAF/+VpD//maRH/5mgS/+ZoE//mZxPa5mcTHOZn
        EwAAAAAAAAAAAAAAAAAAAAAAMcs6ADHRPAAxzDtEMc073zHOPP8xzjv/Mck7/zDDOv8wwjr/McA6/zG/
        OvvLUAH5y1AB/81TAf/TWwD/01wB/9NcAf/TXAL/010D/9NdA//bYgn/5mkS/+ZoE//maBP/5mcT/+Zm
        FPPmZhRE5mYUAAAAAAAAAAAAAAAAAAAAAAAAAAAAMc06ADHTPQAxzjxeMc879DHPO/8xzTz/MMQ6/zDC
        Ov8xwDr/Mb86/8tQAfTLUAH/zlQB/9NcAv/TXQP/010D/9NdA//TXQP/010D/91jC//maBP/5mcS/+Zn
        Ev/mZhT/5mYV/+dlFpPoYhwD52QYAAAAAAAAAAAAAAAAAAAAAAAAAAAAMc86ADHPOgky0DymMtA8/zLP
        PP8xxjr/MME6/zHAOv8xvzr/y1AB5stQAf/OVQL/010D/9NdA//TXQP/010D/9NdAv/TXQH/3WMK/+Zn
        Ev/mZxP/5mYU/+dlFf/nZBf/52QX5edjFzjnYxcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMtA7ADLQ
        O0Qy0TvyMtE7/zHIOv8wwTr/McA6/zG/OvbLUAHLy1AB/85VAv/TXQL/010C/9NeAf/TXgD/014A/9Ne
        AP/dYgn/5mYU/+ZmFf/nZRb/52QY/+dkF//nYxb/6GMWt+hiGBjoYhgAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAy0TsAMtE7DzLRPMMy0Tz/Mck7/zDBOv8xwDr/Mb862stQAZ3LUAH/zVQB/9NeAP/TXgD/014A/9Ne
        AP/TXgD/014A/9thCf/nZRX/52UX/+dkF//nZBb/6GMW/+hjF//oYhf+6GAWp+hdEx3oXhMA62IdAAAA
        AAAAAAAAAAAAADLRQQAv1DkAMdI8kTHSPP8xyjv/MME6/zHAOv8xwDquy1ABXctQAffNUwH/010A/9Ne
        Af/TXgH/014C/9NeAv/TXgL/2GAI/+ZkFv/nZBb/52MV/+hjFv/oYhf/6GEY/+hfFv/oXRP+6VsOxelX
        ClDpVAoM6VUMAAAAAAAAAAAAAAAAADLRPAAw0zxuMdI8/zHJO/8wwTr/McA6+zHAOW3LUAEgy1AB08xR
        Af/SXAP/018D/9NfA//TXwL/018C/9NfAv/VYAT/5GMT/+hjFv/oYxf/6GEY/+hgF//pXhT/6VwR/+la
        Df/pVwv/6VQJ8+lRB7npTQV06EoESelHATvpQwE+8TkAVpOFHa01zzv/MMg7/zDBOv8xwDrcMcA5KstQ
        AQDLUAGFy1AB/9BaAv/TXwL/018C/9NfAv/TXwL/018C/9NfAv/gYQ7/6GIX/+hhF//oXxX/6V4S/+lb
        EP/pWA7/6VYM/+lTCf/pUQb/6U4E/+hLBP/pRwL36UQB8OhBAfLrOwD7rG0U/zPPO/8wxjv/MME6/zHB
        OpMxvjUDy1ABAMtQASrLUAHezlYC/9NfAv/TXwL/018C/9RfAf/UYAH/1GAB/9lgCP/nYBb/6V8U/+lc
        Ev/pWhD/6VcO/+lUC//pUgj/6U8F/+lNA//pSQL/6UYC/+lDAf/oQAD/6DwA/+s2AP+Zexr/MM88/zDD
        Ov8wwjrlMcE7NTHBOwDLUAEAy1ABAMtQAXfMUgH8010B/9RgAf/UYAL/1GAC/9RgA//UYAT/1WAF/+Fe
        Dv/pWxH/6VkP/+lWDP/pVAj/6VEG/+lOBP/pSwL/6UgC/+lEAv/oQQH/6D4A/+g6AP/oNgD/5jQA/3aX
        Jf8uzDz/MMM6/TDCOYEywD0CMcE7AAAAAADLUAEAy1ABE8tQAbDQWAL/1GAE/9RgBf/UYAX/1GAE/9Rh
        A//UYQL/12AE/+ZZC//pVQr/6VIH/+lPBf/pTQP/6UoD/+lGAv/pQwH/6EAA/+g8AP/oOQD/6DUA/+kv
        AP/RQwf/TLgz/y/HO/8wwzu4MMI5FjDCOQAAAAAAAAAAAAAAAADLUAEAyk8BKM1TAsfTXgP/1GEC/9Rh
        Av/UYQH/1GEB/9RhAf/UYQH/2lwD/+dSBf/pTgX/6UsD/+lIAv/pRQH/6EIB/+g+AP/oOwD/6DcA/+gz
        AP/nLwD/6SkA/5l0Gf8zyTv/MMQ60DDDOy8wwzsAAAAAAAAAAAAAAAAAAAAAAMtQAQDLUQEAy08BL89Y
        AcfUYAH/1GEB/9RhAf/UYQH/1GEB/9RhAf/UYQH/21oB/+dMAf/pRgH/6UMB/+hAAP/oPQD/6DkA/+g1
        AP/oMQD/5y0A/+onAP/JRAr/TbUy/y/HPNAxxDo4MsQ8ADDDOwAAAAAAAAAAAAAAAAAAAAAAAAAAAMNC
        AADSXAEAzVQBJ9JeAa/UYQH71GEB/9RiAf/UYgH/1GIB/9RiAv/UYgP/2lkC/+RHAf/oPgD/6DsA/+g3
        AP/oMwD/6C8A/+grAP/qJQD/2DMF/2qaKP0vyTu5McQ7LzDFOgAyxDwAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADWZQAA018BEdRiAHTUYgLe1GID/9RiA//UYgT/1GIE/9RiA//UYwL/110B/99M
        AP/mOwD/6DEA/+gsAP/oKQD/6SQA/9czBf98hyHmMsg7gi7HOxcwxjsAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADUYgQA1GIEAdRiBCnUYgSE1GID0tRjAvfUYwH/1WMA/9Vj
        AP/VYwD/1WMA/9hbAP/eSwH/4zoC/+YrAfraLgTcj3UckzLKOjQQ3kYDJM8/AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1GIEANRiBQLUYwAe1WMAWtVj
        AJnVYwDG1WMA4tVjAO7VYwHu1WQD59VkBM7WYASm204DacFNCike40MESL81AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4AB//4AAH/4AAAf8AAAD+AAAAfgAAAHwAAAA4AAAAGAAAABAAAAAAAA
        AAAAAAAAAADgAAAA+AAAAP4AAAD/AAAAfwAAAH+AAAA/gAAAH8AAAAfAAAAAAAAAAACAAAABgAAAAcAA
        AAPgAAAH8AAAD/gAAB/8AAA//gAAf/+AAf8=
</value>
  </data>
</root>