<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="timer2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>118, 17</value>
  </metadata>
  <metadata name="timer3.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>219, 17</value>
  </metadata>
  <metadata name="timer4.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>320, 17</value>
  </metadata>
  <data name="txtxcrearfuncion.Text" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION tablas_negocio_online()
  RETURNS void AS
$BODY$
BEGIN 

CREATE TABLE cg_empemisor(
	ccodrucemisor char (15) NOT NULL,
	cdesrucemisor char (200) NULL,
	flgActivo bit NULL,
	nventaflg numeric(1,0)  NULL,
	ncompraflg numeric(1,0)   NULL,
	ncobranzaflg numeric(1,0)   NULL,
	npagoflg numeric(1,0)   NULL,
PRIMARY KEY  (ccodrucemisor) );

CREATE TABLE cg_empresa(
	ccodrucemisor char(15) NULL,
	ccod_empresa char (3) NULL,
	nomempresa char (80) NULL,
PRIMARY KEY  (ccodrucemisor,ccod_empresa) );


create sequence sec_id_log minvalue 1 maxvalue 9999999999 increment by 1 ;
CREATE TABLE cg_log(
	id int DEFAULT nextval('sec_id_log'::regclass),
	tipo_error text NULL,
	error_mensaje text NULL,
	fechahora date NULL,
PRIMARY KEY  (id) );


CREATE TABLE cg_modulos(
	ccodmod char(10) NULL,
	cdesmod char(100) NULL
) ;


CREATE TABLE cg_usuario(
	ccodusu char(10) NOT NULL,
	cdesusu char(60) NOT NULL,
	password char(250) NOT NULL,
	fec_ultacceso date NULL,
PRIMARY KEY(ccodusu));

CREATE TABLE cg_usuario_acceso(
	ccodusu char(10) NOT NULL,
	ccodmod char(10) NOT NULL,
	flgacceso numeric(1, 0) NULL
);


CREATE TABLE configuracion(
	ccod_empresa char(3) NULL,
	cper char(4) NULL,
	crazemp char(100) NULL,
	crucemp char(15) NULL,
	cEntidad char(3) NULL,
	csub1_vta char(3) NULL,
	clreg1_vta char(20) NULL,
	csub2_vta char(3) NULL,
	clreg2_vta char(20) NULL,
	cconts_vta char(20) NULL,
	ccontd_vta char(20) NULL,
	cfefec_vta char(4) NULL,
	ctares_vta numeric(1, 0) NULL,
	ctaimp_vta numeric(1, 0) NULL,
	Ctaact_vta numeric(1, 0) NULL,
	asientos_vta numeric(1, 0) NULL,
	csub1_com char(3) NULL,
	clreg1_com char(20) NULL,
	csub2_com char(3) NULL,
	clreg2_com char(20) NULL,
	cconts_com char(20) NULL,
	ccontd_com char(20) NULL,
	cfefec_com char(4) NULL,
	ctares_com numeric(1, 0) NULL,
	ctaimp_com numeric(1, 0) NULL,
	Ctapas_com numeric(1, 0) NULL,
	asientos_com numeric(1, 0) NULL,
	cTipo char(2) NULL,
	cEnt_anula char(15) NULL
);

create sequence sec_id_compras minvalue 1 maxvalue 9999999999 increment by 1 ;
CREATE TABLE fin_compras(
	 idcompras   int  DEFAULT nextval('sec_id_compras'::regclass),
	 ccodrucemisor   char (15) NULL,
	 ccod_empresa   char (3) NULL,
	 cper   char (4) NULL,
	 cmes   char (2) NULL,
	 ffechadoc   date  NULL,
	 fechaven   date  NULL,
	 ccoddoc   nchar (2) NULL,
	 ccoddas   nchar (3) NULL,
	 cyeardas   nchar (4) NULL,
	 cserie   nchar (20) NULL,
	 cnumero   nchar (20) NULL,
	 ccodenti   nchar (11) NULL,
	 cdesenti   nchar (100) NULL,
	 ctipdoc   nchar (1) NULL,
	 ccodruc   nchar (15) NULL,
	 crazsoc   nchar (100) NULL,
	 ccodclas   nchar (1) NULL,
	 nbase1   numeric (15, 2) NULL,
	 nigv1   numeric (15, 2) NULL,
	 nbase2   numeric (15, 2) NULL,
	 nigv2   numeric (15, 2) NULL,
	 nbase3   numeric (15, 2) NULL,
	 nigv3   numeric (15, 2) NULL,
	 nina   numeric (15, 2) NULL,
	 nisc   numeric (15, 2) NULL,
	 nicbper   numeric (15, 2) NULL,
	 nexo   numeric (15, 2) NULL,
	 ntots   numeric (15, 2) NULL,
	 cdocnodom   nchar (20) NULL,
	 cnumdere   nchar (15) NULL,
	 ffecre   date  NULL,
	 ntc   numeric (10, 6) NULL,
	 freffec   date  NULL,
	 crefdoc   nchar (2) NULL,
	 crefser   nchar (6) NULL,
	 crefnum   nchar (13) NULL,
	 cmreg   nchar (1) NULL,
	 ndolar   numeric (15, 2) NULL,
	 ffechaven2   date  NULL,
	 ccond   nchar (3) NULL,
	 cctabase   nchar (10) NULL,
	 cctaicbper   nchar (10) NULL,
	 cctaotrib   nchar (10) NULL,
	 cctatot   nchar (10) NULL,
	 ccodcos   nchar (9) NULL,
	 ccodcos2   nchar (9) NULL,
	 nresp   numeric (1, 0) NULL,
	 nporre   numeric (5, 2) NULL,
	 nimpres   numeric (15, 2) NULL,
	 cserre   nchar (6) NULL,
	 cnumre   nchar (13) NULL,
	 ffecre2   date  NULL,
	 ccodpresu   nchar (10) NULL,
	 nigv   numeric (5, 2) NULL,
	 cglosa   nchar (50) NULL,
	 nperdenre   numeric (15, 2) NULL,
	 nbaseres   numeric (15, 2) NULL,
	 cigvxacre   nchar (1) NULL,
	 created_at   date  NULL,
	 updated_at   date  NULL,
	 estado   varchar (255) NULL,
	 en_ambiente_de   varchar (255) NULL,
	 es_con_migracion   numeric (1, 0) NULL,
	 ccodcos3   nchar (15) NULL,
	 obserror   text  NULL,
PRIMARY KEY (idcompras) );


create sequence sec_id_ventas minvalue 1 maxvalue 9999999999 increment by 1 ;
CREATE TABLE fin_ventas(
	 idventas   int   DEFAULT nextval('sec_id_ventas'::regclass),
	 ccodrucemisor   char (15) NULL,
	 ccod_empresa   char (3) NULL,
	 cper   char (4) NULL,
	 cmes   char (2) NULL,
	 ffechadoc   date  NULL,
	 ffechaven   date  NULL,
	 ccoddoc   nchar (2) NULL,
	 cserie   nchar (20) NULL,
	 cnumero   nchar (20) NULL,
	 ccodenti   nchar (11) NULL,
	 cdesenti   nchar (100) NULL,
	 ctipdoc   nchar (1) NULL,
	 ccodruc   nchar (15) NULL,
	 crazsoc   nchar (100) NULL,
	 nbase2   numeric (15, 2) NULL,
	 nbase1   numeric (15, 2) NULL,
	 nexo   numeric (15, 2) NULL,
	 nina   numeric (15, 2) NULL,
	 nisc   numeric (15, 2) NULL,
	 nigv1   numeric (15, 2) NULL,
	 nicbpers   numeric (15, 2) NULL,
	 nbase3   numeric (15, 2) NULL,
	 ntots   numeric (15, 2) NULL,
	 ntc   numeric (10, 6) NULL,
	 freffec   date  NULL,
	 crefdoc   nchar (2) NULL,
	 crefser   char (6) NULL,
	 crefnum   nchar (13) NULL,
	 cmreg   nchar (1) NULL,
	 ndolar   numeric (15, 2) NULL,
	 ffechaven2   date  NULL,
	 ccond   nchar (3) NULL,
	 ccodcos   nchar (15) NULL,
	 ccodcos2   nchar (15) NULL,
	 cctabase   nchar (20) NULL,
	 cctaicbper   nchar (20) NULL,
	 cctaotrib   nchar (20) NULL,
	 cctatot   nchar (20) NULL,
	 nresp   numeric (1, 0) NULL,
	 nporre   numeric (5, 2) NULL,
	 nimpres   numeric (15, 2) NULL,
	 cserre   nchar (6) NULL,
	 cnumre   nchar (13) NULL,
	 ffecre   date  NULL,
	 ccodpresu   nchar (10) NULL,
	 nigv   numeric (5, 2) NULL,
	 cglosa   text NULL,
	 ccodpago   nchar (3) NULL,
	 nperdenre   numeric (1, 0) NULL,
	 nbaseres   numeric (15, 2) NULL,
	 cctaperc   nchar (20) NULL,
	 created_at   date  NULL,
	 updated_at   date  NULL,
	 estado   varchar (255) NULL,
	 en_ambiente_de   varchar (255) NULL,
	 es_con_migracion   numeric (1, 0) NULL,
	 ccodcos3   nchar (15) NULL,
	 obserror   text  NULL,
PRIMARY KEY (idventas));


create sequence sec_idcobranzas minvalue 1 maxvalue 9999999999 increment by 1 ;
CREATE TABLE fin_cobranzapago
(
    idcobranzas numeric(20,0),
    ccodrucemisor character(15) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    ccod_empresa character(3) COLLATE pg_catalog."default",
    cper character(4) COLLATE pg_catalog."default",
    cmes character(2) COLLATE pg_catalog."default",
    ntipocobpag numeric(1,0),
    ffechacan date,
    cdoccan character(2) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    csercan character(20) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    cnumcan character(20) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    ccuecan character(20) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    cmoncan character(1) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    nimporcan numeric(15,2) NOT NULL DEFAULT 0,
    ntipcam numeric(10,6) NOT NULL DEFAULT 0,
    ccodpago character(3) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    ccoddoc character(2) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    cserie character(20) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    cnumero character(20) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    ffechadoc date,
    ffechaven date,
    ccodenti character(11) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    ccodruc character(15) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    crazsoc character(150) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    nimportes numeric(15,2) NOT NULL DEFAULT 0,
    nimported numeric(15,2) NOT NULL DEFAULT 0,
    ccodcue character(20) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    cglosa text COLLATE pg_catalog."default",
    ccodcos character(15) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    ccodcos2 character(15) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    nporre numeric(5,2) NOT NULL DEFAULT 0,
    nimpperc numeric(15,2) NOT NULL DEFAULT 0,
    nperdenre numeric(1,0) NOT NULL DEFAULT 0,
    cserre character(6) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    cnumre character(13) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    ffecre date,
    obserror text COLLATE pg_catalog."default",
    resultado_migracion numeric(1,0),
    created_at date,
    updated_at date,
    estado character(255) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    en_ambiente_de character(255) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
    es_con_migracion numeric(1,0),
    ccodcos3 character(15) COLLATE pg_catalog."default" NOT NULL DEFAULT ''::bpchar,
	PRIMARY KEY (idcobranzas));


END;
$BODY$
  LANGUAGE plpgsql VOLATILE
</value>
  </data>
  <metadata name="timer5.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>421, 17</value>
  </metadata>
  <data name="txtventa1.Text" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION fn_ventas_envio(
    OUT resultado text,
    IN p_ruc_emisor character,
    IN p_empresa character)
  RETURNS text AS
$BODY$
BEGIN 
   
    select json_agg(to_json(t))::text
    from (
        select
            idventas, fin_ventas.ccod_empresa,fin_ventas.cper,cmes,    
            trim(configuracion.csub1_vta) AS ccodori,   
            trim(configuracion.clreg1_vta) AS ccodsu,   
            trim(configuracion.csub2_vta) AS ccodori_p,   
            trim(configuracion.clreg2_vta) AS ccodsu_p,   
            trim(configuracion.cconts_vta) AS ccodcue_ps,   
            trim(configuracion.ccontd_vta) AS ccodcue_pd,  
            trim(configuracion.cfefec_vta) AS ccodflu,   
            configuracion.ctares_vta AS flgctares,   
            configuracion.ctaimp_vta AS flgctaimp,  
            configuracion.Ctaact_vta AS flgctaact,  
            configuracion.asientos_vta AS flggencomp,  
            trim(configuracion.cEntidad) AS ccodtipent,   
            to_char(ffechadoc, 'YYYY-MM-DD') AS ffechadoc, -- trim(Convert(char(10), ffechadoc, 112)) AS ffechadoc,   
            to_char(ffechaven, 'YYYY-MM-DD') AS ffechaven, -- trim(Convert(char(10), ffechaven, 112)) AS ffechaven,   
            trim(ccoddoc) AS ccoddoc,  
            trim(cserie) AS cserie,  
            trim(cnumero) AS cnumero,  
            trim(ccodenti) AS ccodenti,  
            trim(cdesenti) AS cdesenti, 
            trim(ctipdoc) AS ctipdoc,  
            trim(ccodruc) AS ccodruc,  
            trim(crazsoc) AS crazsoc,  
            coalesce(nbase2, 0.00) as nbase2,   
            coalesce(nbase1, 0.00) as nbase1,  
            coalesce(nexo, 0.00) as nexo,  
            coalesce(nina, 0.00) as nina,   
            coalesce(nisc, 0.00) as nisc, 
            coalesce(nigv1, 0.00) as nigv1, 
            coalesce(nicbpers, 0.00) as nicbpers,  
            coalesce(nbase3, 0.00) as nbase3,  
            coalesce(ntots, 0.00) as ntots,  
            coalesce(ntc, 0.00) as ntc,  
            to_char(freffec, 'YYYY-MM-DD') AS freffec, --trim(coalesce(Convert(char(10), freffec, 112), ' ')) AS freffec,
            case when trim(coalesce(crefdoc,'')) = '' then ' ' else trim(crefdoc)  end as crefdoc,  
            case when trim(coalesce(crefser,'')) = '' then ' ' else trim(crefser)  end as crefser,  
            case when trim(coalesce(crefnum,'')) = '' then ' ' else trim(crefnum)  end as crefnum, 
            case when trim(coalesce(cmreg,'')) = '' then ' ' else trim(cmreg)  end as cmreg,  
            coalesce(ndolar, 0.00) as ndolar,   
            to_char(ffechaven2, 'YYYY-MM-DD') AS ffechaven2, --trim(coalesce(Convert(char(10), ffechaven2, 112), ' ') AS ffechaven2,   
            case when trim(coalesce(ccond,'')) = '' then ' ' else trim(ccond)  end as ccond,   
            case when trim(coalesce(substring(ccodcos,1,9),'')) = '' then ' ' else trim(substring(ccodcos,1,9))  end as ccodcos,
            case when trim(coalesce(substring(ccodcos2,1,9),'')) = '' then ' ' else trim(substring(ccodcos2,1,9))  end as ccodcos2,
            case when trim(coalesce(cctabase,'')) = '' then ' ' else trim(cctabase)  end as cctabase,   
            case when trim(coalesce(cctaicbper,'')) = '' then ' ' else trim(cctaicbper)  end as cctaicbper,   
            case when trim(coalesce(cctaotrib,'')) = '' then ' ' else trim(cctaotrib)  end as cctaotrib,   
            case when trim(coalesce(cctatot,'')) = '' then ' ' else trim(cctatot)  end as cctatot,   
            coalesce(nresp, 0.00) as nresp,   
            coalesce(nporre, 0.00) as nporre,   
            coalesce(nimpres, 0.00) as nimpres,   
            case when trim(coalesce(cserre,'')) = '' then ' ' else trim(cserre)  end as cserre,   
            case when trim(coalesce(cnumre,'')) = '' then ' ' else trim(cnumre)  end as cnumre,   
            to_char(ffecre, 'YYYY-MM-DD') AS ffecre, -- trim(coalesce(Convert(char(10), ffecre, 112), ' ') AS ffecre,
            case when trim(coalesce(ccodpresu,'')) = '' then ' ' else trim(ccodpresu)  end as ccodpresu,   
            coalesce(nigv, 0.00) as nigv,   
            case when trim(coalesce(substring(cglosa,1,80),'')) = '' then ' ' else trim(substring(cglosa,1,80))  end::character(80) as cglosa,  
            case when trim(coalesce(ccodpago,'')) = '' then ' ' else trim(ccodpago)  end as ccodpago,   
            coalesce(nperdenre, 0.00) as nperdenre,   
            coalesce(nbaseres, 0.00) as nbaseres,   
            case when trim(coalesce(cctaperc,'')) = '' then ' ' else trim(cctaperc)  end as cctaperc,  
            case when trim(coalesce(estado,'')) = '' then ' ' else trim(estado)  end as estado,   
            case when trim(coalesce(en_ambiente_de,'')) = '' then ' ' else trim(en_ambiente_de)  end as en_ambiente_de,   
            es_con_migracion,   
            case when trim(coalesce(ccodcos3,'')) = '' then ' ' else trim(ccodcos3)  end as ccodcos3,   
            case when es_con_migracion=3  then  trim(configuracion.cEnt_anula)  else '' end  as ccodrucanula       
        from fin_ventas
        join configuracion ON fin_ventas.CCOD_EMPRESA = configuracion.CCOD_EMPRESA and fin_ventas.CPER = configuracion.CPER  
        join CG_EMPRESA emp on fin_ventas.ccodrucemisor = emp.ccodrucemisor and fin_ventas.ccod_empresa = emp.CCOD_EMPRESA 
        join CG_EMPEMISOR empemi on emp.ccodrucemisor = empemi.ccodrucemisor and flgactivo = 1::bit    
        where   fin_ventas.ccodrucemisor= p_ruc_emisor::character(15)
            and fin_ventas.ccod_empresa = p_empresa::character(3)
            and es_con_migracion in (0, 3)
            and configuracion.ctipo = '01'
    ) t
    into resultado;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION fn_ventas_envio(character, character)
  OWNER TO postgres;</value>
  </data>
  <data name="txtventa2.Text" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION fn_ventas_envio_resultado(p_datos text)
  RETURNS void AS
$BODY$
DECLARE
    v_data json;
BEGIN 

    v_data:=p_datos::json;
    UPDATE fin_ventas t 
    SET es_con_migracion = r.resultado_migracion,
        obserror = r.obserror
    from json_to_recordset(v_data) as r (idventas integer, obserror text, es_con_migracion integer, resultado_migracion integer)
    where t.idventas = r.idventas and t.es_con_migracion = r.es_con_migracion;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION fn_ventas_envio_resultado(text)
  OWNER TO postgres;</value>
  </data>
  <data name="txtcompras1.Text" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION fn_compras_envio(
    OUT resultado text,
    IN p_ruc_emisor character,
    IN p_empresa character)
  RETURNS text AS
$BODY$
BEGIN 

    select json_agg(to_json(t))::text
    from (
        select
            idcompras, fin_compras.ccod_empresa, fin_compras.cper,cmes, 
            trim(configuracion.csub1_com) as ccodori,   
            trim(configuracion.clreg1_com) as ccodsu,   
            trim(configuracion.csub2_com) as ccodori_p,   
            trim(configuracion.clreg2_com) as ccodsu_p,     
            trim(configuracion.cconts_com) as ccodcue_ps,    
            trim(configuracion.ccontd_com) as ccodcue_pd,    
            trim(configuracion.cfefec_com) as ccodflu,    
            configuracion.ctares_com as flgctares,
            configuracion.ctaimp_com as flgctaimp,
            configuracion.ctapas_com as flgctaact,
            configuracion.asientos_com as flggencomp,    
            trim(configuracion.cEntidad) as ccodtipent,             
            to_char(ffechadoc, 'YYYY-MM-DD') as ffechadoc, --trim(Convert(char(10), ffechadoc, 112)) as ffechadoc,    
            to_char(fechaven, 'YYYY-MM-DD') as fechaven,-- trim(Convert(char(10), fechaven, 112)) as fechaven,
            trim(ccoddoc)as ccoddoc,   
            trim(coalesce(ccoddas,'')) as ccoddas,    
            trim(coalesce(cyeardas,'')) as cyeardas,   
            trim(cserie) as cserie,    
            trim(cnumero) as cnumero,   
            trim(fin_compras.ccodenti) as ccodenti,    
            trim(cdesenti) as cdesenti,   
            trim(ctipdoc) as ctipdoc,    
            trim(ccodruc) as ccodruc,    
            trim(crazsoc) as crazsoc,    
            trim(coalesce(ccodclas,'')) as ccodclas,   
            nbase1,nigv1, 
            coalesce(nbase2,0.00) as nbase2, 
            coalesce(nigv2,0.00) as nigv2 , 
            coalesce(nbase3,0.00) as nbase3, 
            coalesce(nigv3,0.00) as nigv3 ,   
            coalesce(nina,0.00) as nina,    
            coalesce(nisc,0.00) as nisc,    
            coalesce(nicbper,0.00) as nicbper,    
            coalesce(nexo,0.00) as nexo,    
            coalesce(ntots,0.00) as ntots,   
            case when trim(coalesce(cdocnodom,'')) = '' then '' else trim(cdocnodom)  end  as cdocnodom,   
            case when trim(coalesce(cnumdere,'')) = '' then '' else trim(cnumdere)  end  as cnumdere,    
            to_char(ffecre, 'YYYY-MM-DD') as ffecre, --trim(coalesce(Convert(char(10), ffecre, 112),''))  as ffecre,    
            ntc,
            to_char(freffec, 'YYYY-MM-DD') as freffec, -- trim(coalesce(Convert(char(10), freffec, 112),'')) as freffec,
            case when trim(coalesce(crefdoc,'')) = '' then '' else trim(crefdoc)  end  as crefdoc,    
            case when trim(coalesce(crefser,'')) = '' then '' else trim(crefser)  end  as crefser,    
            case when trim(coalesce(crefnum,'')) = '' then '' else trim(crefnum)  end  as crefnum,    
            case when trim(coalesce(cmreg,'')) = '' then '' else trim(cmreg)  end  as cmreg,    
            coalesce(ndolar,0.00) as ndolar,
            to_char(ffechaven2, 'YYYY-MM-DD') as ffechaven2, --trim(coalesce(Convert(char(10), ffechaven2, 112),'')) as ffechaven2,
            case when trim(coalesce(ccond,'')) = '' then '' else trim(ccond)  end  as ccond,    
            case when trim(coalesce(cctabase,'')) = '' then '' else trim(cctabase)  end  as cctabase,    
            case when trim(coalesce(cctaicbper,'')) = '' then '' else trim(cctaicbper)  end  as cctaicbper,    
            case when trim(coalesce(cctaotrib,'')) = '' then '' else trim(cctaotrib)  end  as cctaotrib,    
            case when trim(coalesce(cctatot,'')) = '' then '' else trim(cctatot)  end  as cctatot,    
            case when trim(coalesce(ccodcos,'')) = '' then '' else trim(ccodcos)  end  as ccodcos,    
            case when trim(coalesce(ccodcos2,'')) = '' then '' else trim(ccodcos2)  end  as ccodcos2,    
            coalesce(nresp,0.00)   as nresp,    
            coalesce(nporre,0.00) as nporre,   
            coalesce(nimpres,0.00) as nimpres,    
            case when trim(coalesce(cserre,'')) = '' then '' else trim(cserre)  end  as cserre,   
            case when trim(coalesce(cnumre,'')) = '' then '' else trim(cnumre)  end  as cnumre,    
            to_char(ffecre2, 'YYYY-MM-DD') as ffecre2, --trim(coalesce(Convert(char(10), ffecre2, 112),'')) as ffecre2 ,    
            case when trim(coalesce(ccodpresu,'')) = '' then '' else trim(cnumre)  end  as ccodpresu,    
            nigv,    
            case when trim(coalesce(cglosa,'')) = '' then '' else trim(cglosa)  end  as cglosa,   
            coalesce(nperdenre,0.00) nperdenre,   
            coalesce(nbaseres,0.00) as nbaseres,    
            case when trim(coalesce(cigvxacre,'')) = '' then '' else trim(cigvxacre)  end  as cigvxacre,    
            case when trim(coalesce(estado,'')) = '' then '' else trim(estado)  end  as estado ,    
            coalesce(en_ambiente_de,'!') as en_ambiente_de,    
            coalesce(es_con_migracion,0)as es_con_migracion,   
            case when trim(coalesce(ccodcos3,'')) = '' then '' else trim(ccodcos3)  end  as ccodcos3,   
            case when  es_con_migracion=3  then  trim(configuracion.cent_anula)  else '' end  as ccodrucanula      
        from fin_compras
        join configuracion ON fin_compras.CCOD_EMPRESA = configuracion.CCOD_EMPRESA AND FIN_COMPRAS.CPER = configuracion.CPER  
        join CG_EMPRESA emp on FIN_COMPRAS.ccodrucemisor = emp.ccodrucemisor and FIN_COMPRAS.ccod_empresa = emp.CCOD_EMPRESA 
        join CG_EMPEMISOR empemi on emp.ccodrucemisor = empemi.ccodrucemisor and flgactivo = 1::bit
        where   fin_compras.ccodrucemisor = p_ruc_emisor::character(15)
            and fin_compras.ccod_empresa = p_empresa::character(3)
            and es_con_migracion in (0, 3)
            and configuracion.CTIPO = '02'
    ) t

    into resultado;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION fn_compras_envio(character, character)
  OWNER TO postgres;</value>
  </data>
  <data name="txtcompras2.Text" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION fn_compras_envio_resultado(p_datos text)
  RETURNS void AS
$BODY$
DECLARE
    v_data json;
BEGIN

    v_data:=p_datos::json;
    UPDATE fin_compras t 
    SET es_con_migracion = r.resultado_migracion,
        obserror = r.obserror
    from json_to_recordset(v_data) as r (idcompras integer, obserror text, es_con_migracion integer, resultado_migracion integer)
    where t.idcompras = r.idcompras and t.es_con_migracion = r.es_con_migracion;

END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;

</value>
  </data>
  <data name="soloventasonline.Text" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION public.fn_integracion_ventas_importar(OUT resultado text, p_datos text, p_cod_emp text)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_data json;
BEGIN 

    v_data:=p_datos::json;
    p_datos=null;
    -- nuevos
    INSERT INTO fin_ventas(
        idventas, ccodrucemisor,
        ccod_empresa, cper, cmes, -- generados
        ffechadoc, ffechaven, ccoddoc, cserie, cnumero, ccodenti, cdesenti, ctipdoc, 
        ccodruc, crazsoc, nbase2, nbase1, nexo, nina, nisc, nigv1, nicbpers, 
        nbase3, ntots, ntc, freffec, crefdoc, crefser, crefnum, cmreg, 
        ndolar, ffechaven2, ccond, ccodcos, ccodcos2, cctabase, cctaicbper, 
        cctaotrib, cctatot, nresp, nporre, nimpres, cserre, cnumre, ffecre, 
        ccodpresu, nigv, cglosa, ccodpago, nperdenre, nbaseres, cctaperc, 
        created_at, updated_at, estado, en_ambiente_de, es_con_migracion, 
        ccodcos3
    ) 
    SELECT
        t.idventas, t.ccodrucemisor, p_cod_emp,
        extract(year from to_date(t.ffechadoc, 'DD/MM/YYYY'))::text, lpad(extract(month from to_date(t.ffechadoc, 'DD/MM/YYYY'))::text, 2, '0'),
        to_date(t.ffechadoc, 'DD/MM/YYYY'), case when coalesce(t.ffechaven, '')='' then null else to_date(t.ffechaven, 'DD/MM/YYYY') end,
        trim(t.ccoddoc) as ccoddoc,
        trim(t.cserie) as cserie,
        trim(t.cnumero) as cnumero,
        trim(t.ccodenti) as ccodenti,
        trim(t.cdesenti) as cdesenti,
        trim(t.ctipdoc) as ctipdoc,
        trim(t.ccodruc) as ccodruc,
        trim(t.crazsoc) as razsoc,

        case when trim(coalesce(t.nbase2, '')) = '' then null else t.nbase2::numeric end as nbase2,
        case when trim(coalesce(t.nbase1, '')) = '' then null else t.nbase1::numeric end as nbase1,
        case when trim(coalesce(t.nexo, '')) = '' then null else t.nexo::numeric end as nexo,
        case when trim(coalesce(t.nina, '')) = '' then null else t.nina::numeric end as nina,
        case when trim(coalesce(t.nisc, '')) = '' then null else t.nisc::numeric end as nisc,
        case when trim(coalesce(t.nigv1, '')) = '' then null else t.nigv1::numeric end as nigv1,
        case when trim(coalesce(t.nicbpers, '')) = '' then null else t.nicbpers::numeric end as nicbpers,
        case when trim(coalesce(t.nbase3, '')) = '' then null else t.nbase3::numeric end as nbase3,
        case when trim(coalesce(t.ntots, '')) = '' then null else t.ntots::numeric end as ntots,
        case when trim(coalesce(t.ntc, '')) = '' then null else t.ntc::numeric end as ntc,
        
        case when coalesce(t.freffec, '')='' then null else to_date(t.freffec, 'DD/MM/YYYY') end,
       
        trim(t.crefdoc) as crefdoc,
        trim(t.crefser) as crefser,
        trim(t.crefnum) as crefnum,
        trim(t.cmreg) as cmreg,


        case when trim(coalesce(t.ndolar, '')) = '' then null else t.ndolar::numeric end as ndolar,
        
        case when coalesce(t.ffechaven2, '')='' then null else to_date(t.ffechaven2, 'DD/MM/YYYY') end,

        trim(t.ccond) as ccond,
        trim(t.ccodcos) as codcos,
        trim(t.ccodcos2) as codcos2,
        trim(t.cctabase) as cctabase,
        trim(t.cctaicbper) as cctaicbper,
        trim(t.cctaotrib) as cctaotrib,
        trim(t.cctatot) as cctatot,


        case when trim(coalesce(t.nresp, '')) = '' then null else t.nresp::numeric end as nresp,
        case when trim(coalesce(t.nporre, '')) = '' then null else t.nporre::numeric end as nporre,
        case when trim(coalesce(t.nimpres, '')) = '' then null else t.nimpres::numeric end as nimpres,

        trim(t.cserre), trim(t.cnumre),
        case when coalesce(t.ffecre, '')='' then null else to_date(t.ffecre, 'DD/MM/YYYY') end,
        
        trim(t.ccodpresu), case when trim(coalesce(t.nigv, '')) = '' then null else t.nigv::numeric end as nigv,
        trim(t.cglosa), trim(t.ccodpago),

        case when trim(coalesce(t.nperdenre, '')) = '' then null else t.nperdenre::numeric end as nperdenre,
        case when trim(coalesce(t.nbaseres, '')) = '' then null else t.nbaseres::numeric end as nbaseres,
        trim(t.cctaperc),
        t.created_at::date, t.updated_at::date,
        trim(t.estado),
        trim(t.en_ambiente_de),
        case when t.estado='ACEPTADO' then 0 else 3 end, trim(t.ccodcos3)
    FROM json_to_recordset(v_data)
    as t(
        idventas integer,
        ccodrucemisor character varying(30),
        ffechadoc character varying(30),
        ffechaven character varying(30),
        ccoddoc character varying(15),
        cserie character varying(20),
        cnumero character varying(20),
        ccodenti character varying(15),
        cdesenti character varying(100),
        ctipdoc character varying(15),
        ccodruc character varying(20),
        crazsoc text,
        nbase2 character varying(50),
        nbase1 character varying(50),
        nexo character varying(50),
        nina character varying(50),
        nisc character varying(50),
        nigv1 character varying(50),
        nicbpers character varying(50),
        nbase3 character varying(50),
        ntots character varying(50),
        ntc character varying(50),
        freffec character varying(30),
        crefdoc character varying(50),
        crefser character varying(20),
        crefnum character varying(20),
        cmreg character varying(10),
        ndolar character varying(50),
        ffechaven2 character varying(30),
        ccond character varying(15),
        ccodcos character varying(15),
        ccodcos2 character varying(15),
        cctabase text,
        cctaicbper text,
        cctaotrib text,
        cctatot text,
        nresp text,
        nporre text,
        nimpres text,
        cserre text,
        cnumre text,
        ffecre text,
        ccodpresu character varying(20),
        nigv character varying(20),
        cglosa text,
        ccodpago character varying(20),
        nperdenre character varying(20),
        nbaseres character varying(20),
        cctaperc character varying(20),
        created_at timestamp, updated_at timestamp,
        estado character varying(255),
        en_ambiente_de character varying(255),
        es_con_migracion boolean,
        ccodcos3 character varying(15)
    )
    left join fin_ventas v on t.idventas=v.idventas
    where v.idventas is null;

    -- update (solo campo migracion)
    update fin_ventas v
    set es_con_migracion=case when t.estado='ACEPTADO' then 0 else 3 end,
    estado=t.estado
    from json_to_recordset(v_data)
    as t ( idventas integer, estado character varying(255), es_con_migracion boolean )    
    where v.idventas=t.idventas;

    -- resultado de confirmacion.
    select json_agg(json_build_object('idventas', idventas, 'es_con_migracion', es_con_migracion))::text
    from json_to_recordset(v_data)
    as t ( idventas integer, es_con_migracion boolean )
    into resultado;
    
end;
$function$
;</value>
  </data>
  <data name="txtversion2.Text" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION fn_select_version()
RETURNS table(cversion character) AS
$BODY$
BEGIN 
    return query select t.cversion from cg_version t;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;</value>
  </data>
  <data name="txtversion3.Text" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION fn_actualizar_version(in p_version character(15))
RETURNS void AS
$BODY$
BEGIN 

    if((select true from cg_version limit 1) is null)then
        insert into cg_version(cversion) values (p_version);
    else
        update cg_version set cversion=p_version, cfecha=now();
    end if;    
    
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;</value>
  </data>
  <metadata name="timer6.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>522, 17</value>
  </metadata>
  <metadata name="timer7.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>623, 17</value>
  </metadata>
  <data name="Funcion_comercial.Text" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION tablas_negocio_online_comercial()
  RETURNS void AS
$BODY$
BEGIN 

CREATE TABLE cg_empemisor(
	ccodrucemisor char (15) NOT NULL,
	cdesrucemisor char (200) NULL,
	flgActivo bit NULL,
	nventaflg numeric(1,0)  NULL,
	ncompraflg numeric(1,0)   NULL,
	ncobranzaflg numeric(1,0)   NULL,
	npagoflg numeric(1,0)   NULL,
PRIMARY KEY  (ccodrucemisor) );


CREATE TABLE cg_empresa(
	ccodrucemisor char(15) NULL,
	ccod_empresa char (3) NULL,
	nomempresa char (80) NULL,
PRIMARY KEY  (ccodrucemisor,ccod_empresa) );


create sequence sec_id_log minvalue 1 maxvalue 9999999999 increment by 1 ;
CREATE TABLE cg_log(
	id int DEFAULT nextval('sec_id_log'::regclass),
	tipo_error text NULL,
	error_mensaje text NULL,
	fechahora date NULL,
PRIMARY KEY  (id) );


CREATE TABLE cg_modulos(
	ccodmod char(10) NULL,
	cdesmod char(100) NULL
) ;


CREATE TABLE cg_usuario(
	ccodusu char(10) NOT NULL,
	cdesusu char(60) NOT NULL,
	password char(250) NOT NULL,
	fec_ultacceso date NULL,
PRIMARY KEY(ccodusu));


CREATE TABLE cg_usuario_acceso(
	ccodusu char(10) NOT NULL,
	ccodmod char(10) NOT NULL,
	flgacceso numeric(1, 0) NULL
);

create table modulo_comercial(
ccodmudulo Char(5) null,
cdesmodulo char(50) null
);

create sequence sec_id minvalue 1 maxvalue 99999999999 increment by 1 ;
CREATE TABLE configuracion2(
	id numeric(20,0),
    ccod_empresa char(3) NULL,
    cper char(4) NULL,
    crazemp char(100) NULL,
    crucemp char(15) NULL, 
    Entidad char(3) NULL,
    Tipo char(2) NULL,
    codtipdocu char(4) NULL,
	serie char(20) NULL,
    ccodmov char(10) NULL,
    ccodpag char(5) NULL,
    ccodvend char(10) NULL,
	ccodalma char(10) NULL,
    Ent_anula char(15) NULL,
	Prodanula char(15) NULL);


create sequence sec_iddocumento minvalue 1 maxvalue 99999999999 increment by 1 ;
CREATE TABLE com_documento (
	iddocumento numeric(20,0),
	ccod_empresa character(3),
	cper character(4),
	cmes character(2),
	--
	ccodori character(3),
    ccodsu character(2),
    ccodori_p character(3),
    ccodsu_p character(2),
    ccodcue_ps character(20),
    ccodcue_pd character(20),
    ccodflu character(4),
    flgctares numeric(1,0),
    flgctaimp numeric(1,0),
    flgctaact numeric(1,0),
    flggencomp numeric(1,0),
    --ccodtipent character(3), -- se repite
	--
	ccodmodulo character(6),
	ccodmov character(5),
	ccoddoc character(2),
	cserie character(20),
	cnumero character(20),
	ccodenti character(11),
	cdesenti character varying(100),
	ccodtipent character(3),
	ccodruc character(15),
	crazsoc character(150),
	cdirecc character varying(250),
	ccodubi character(6),
	ccodcontac character(3),
	cdescontacto character(150),
	ffecha date,
	ffechaven date,
	ffechaalm date,
	ccodpag character(2),
	cmoneda character(1),
	ntcigv numeric(10,6),
	cguiaser character(7),
	cguianum character(13),
	mdsc text,
	ccodvend character(4),
	ccodclas character(1),
	ccodcon character(4),
	cnumordc character(20),
	crefdoc character(2),
	freffec date,
	crefser character(10),
	crefnum character(13),
	ccat09 character(2),
	cmotinc character(50),
	nresp numeric(1,0),
	ccodpds character(5),
	nporre numeric(5,2),
	ffecre date,
	cnumdere character(15),
	ccodpps character(2),
	nporre2 numeric(5,2),
	nperdenre numeric(1,0),
	nbase1 numeric(15,2),
	nigv1 numeric(15,2),
	nbase2 numeric(15,2),
	nigv2 numeric(15,2),
	nbase3 numeric(15,2),
	nigv3 numeric(15,2) ,
	nimpicbper numeric(15,2),
	nina numeric(15,2),
	nexo numeric(15,2),
	nisc numeric(15,2),
	nivabase numeric(15,2),
	nivaimp numeric(15,2),
	nimpant numeric(15,2),
	ntot numeric(15,2),
	created_at timestamp,
	updated_at timestamp,
	estado character varying(255),
	en_ambiente_de character varying(255),
	es_con_migracion numeric(1, 0)  default 0,
	ccodcos3 character(15),	
	ccodrucanula character(15),
	obserror text,
	resultado_migracion numeric(1, 0),
	nflgexisteanular integer NOT NULL DEFAULT 0,
	constraint pk_documento PRIMARY KEY (iddocumento)
);
create sequence sec_iddetalledocumento minvalue 1 maxvalue 99999999999 increment by 1 ;
CREATE TABLE com_detalledocumento (
	iddetalledocumento numeric(20, 0) not null,
	ccodalma character(3),
	ccodprod character(20),
	ccodmed character(15),
	ccodlote character(20),
	nuniori numeric(20,10),
	nvvori numeric(20,10),
	npvori numeric(20,10),
	nvalor numeric(15,2),
	nigvtot numeric(15,2),
	ntotori numeric(15,2),
	npigv numeric(5,2),
	nconvnum numeric(9,2),
	nconvden numeric(9,2),
	clibprod character(1),
	ccodcos character(9),
	ccodcos2 character(9),
	ccodpresu character(10),
	cctaprod character(20),
	npordscu numeric(15,2),
	ndsctos numeric(15,2),
	ccodisc character(5),
	nporisc numeric(5,2),
	nisc numeric(15,2),
	tipo_isc numeric(1,0),
	mdscl text,
	iddocumento int not null,
	constraint pk_detalle_documento PRIMARY KEY (iddetalledocumento),
	constraint fk_detalle_documento FOREIGN KEY (iddocumento) references com_documento(iddocumento)
);

create sequence sec_idproducto minvalue 1 maxvalue 99999999999 increment by 1 ;
CREATE TABLE com_producto (
	idproducto numeric(20,0) not null,
	--
	ccod_empresa character(3),
	cper character(4),
	cmes character(2),
	ccodmodulo character(6),
	--
	ccodfamg character(20),
	cdesfamg character(50),
	ccodfamf character(20),
	cdesfamf character(50),
	ccodprod character(20),
	cdesprod character(150),
	cdesprodGen character varying(500),
	ccodtes character(2),
	cdesmar character(80),
	ccodmed character(15),
	ccodcatbs character(8),
	cdescatbs character(100),
	ntipoprod character(8),
	nunidsec character(2),
	npesoprod numeric(10,4),
	ccodbarras character(15),
	ninprod character(2),
	nanuprod character(2),
	nlote character(2),
	nseruni character(2),
	nicbper character(2),
	nprodanti character(2),
	ngasrela character(2),
	nprodsafniif character(2),
	ccomcue character(20),
	cvencue character(20),
	cdebicue character(20),
	ccredcue character(20),
	cdebicuei character(20),
	ccredcuei character(20),
	ccodcos character(9),
	ccodcos2 character(9),
	ccodpresu character(10),
	ccomprod character(1),
	cvenprod character(1),
	ccodisc character(5),
	cmoneda character(1),
	npreunit1 numeric(15,4),
	npreunit2 numeric(15,4),
	npreunit3 numeric(15,4),
	npreunit4 numeric(15,4),
	npreunit5 numeric(15,4),
	npreunit6 numeric(15,4),
	npreunit7 numeric(15,4),
	npreunit8 numeric(15,4),
	npreunit9 numeric(15,4),
	npreunit10 numeric(15,4),
	npreunit11 numeric(15,4),
	npreunit12 numeric(15,4),
	npreunit13 numeric(15,4),
	npreunit14 numeric(15,4),
	npreunit15 numeric(15,4),
	nstockmin numeric(15,4),
	nstockmax numeric(15,4),
	nrango1 numeric(15,0),
	nrango2 numeric(15,0),
	nresp numeric(1,0),
	ccodpps character(2),
	ccodpds character(5),
	nagemonmin numeric(15,2),
	ccodlabora character(4),
	cdeslabora character(60),
	estado varchar(255),
	en_ambiente_de varchar(255),
	es_con_migracion numeric(1,0),
	ccodcos3 nchar(15),
	obserror text,
	resultado_migracion numeric(1, 0)
);

END;
$BODY$
  LANGUAGE plpgsql VOLATILE</value>
  </data>
  <data name="func_guardar_com_documento.Text" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION func_guardar_com_documento(
	OUT resultado text,
	IN pjson text,
	IN ptipo character(2)
)
RETURNS text AS
$BODY$
declare 
	a_json json;
	a_documento json;
	a_detalle json;
begin
	/* Tipo:
	01: Venta
	02: Compra
	*/
    -- 0. Truncar tabla
    truncate table com_detalledocumento;
	truncate table com_documento cascade;
    a_json		:= pjson::json;
	a_documento	:= a_json-&gt;'documentos';
	a_detalle	:= a_json-&gt;'detalles';
    -- 1. Importar datos
    INSERT INTO com_documento(
		iddocumento, ccod_empresa, cper, cmes,
		--
		ccodori, ccodsu, ccodori_p, ccodsu_p, ccodcue_ps,
		ccodcue_pd, ccodflu, flgctares, flgctaimp, flgctaact, flggencomp,
		-- ccodtipent, se repite
		--
		ccodmodulo, ccodmov, ccoddoc,
		cserie, cnumero, ccodenti, cdesenti, ccodtipent, ccodruc, crazsoc, cdirecc, ccodubi,
		ccodcontac, cdescontacto, ffecha, ffechaven, ffechaalm, ccodpag, cmoneda, ntcigv,
		cguiaser, cguianum, mdsc, ccodvend, ccodclas, ccodcon, cnumordc, crefdoc, freffec,
		crefser, crefnum, ccat09, cmotinc, nresp, ccodpds, nporre, ffecre, cnumdere, ccodpps,
		nporre2, nperdenre, nbase1, nigv1, nbase2, nigv2, nbase3, nigv3, nimpicbper, nina, nexo,
		nisc, nivabase, nivaimp, nimpant, ntot, estado, en_ambiente_de,
		es_con_migracion, ccodcos3, ccodrucanula
    )
    select
		iddocumento, ccod_empresa, cper, cmes,
		ccodori, ccodsu, ccodori_p, ccodsu_p, ccodcue_ps,
		ccodcue_pd, ccodflu, flgctares, flgctaimp, flgctaact, flggencomp,
		-- ccodtipent, se repite
		coalesce(ccodmodulo,'') as ccodmodulo,
		coalesce(ccodmov,'') as ccodmov,
		coalesce(ccoddoc,'') as ccoddoc,
		coalesce(cserie,'') as cserie,
		coalesce(cnumero,'') as cnumero,
		coalesce(ccodenti,'') as ccodenti,
		coalesce(cdesenti,'') as cdesenti,
		coalesce(ccodtipent,'') as ccodtipent,
		coalesce(ccodruc,'') as ccodruc,
		coalesce(crazsoc,'') as crazsoc,
		coalesce(cdirecc,'') as cdirecc,
		coalesce(ccodubi,'') as ccodubi,
		coalesce(ccodcontac,'') as ccodcontac,
		coalesce(cdescontacto,'') as cdescontacto,
		ffecha,
		ffechaven,
		ffechaalm,
		coalesce(ccodpag,'') as ccodpag,
		coalesce(cmoneda,'') as cmoneda,
		coalesce(ntcigv,0.0) as ntcigv,
		coalesce(cguiaser,'') as cguiaser,
		coalesce(cguianum,'') as cguianum,
		coalesce(mdsc,'') as mdsc,
		coalesce(ccodvend,'') as ccodvend,
		coalesce(ccodclas,'') as ccodclas,
		coalesce(ccodcon,'') as ccodcon,
		coalesce(cnumordc,'') as cnumordc,
		coalesce(crefdoc,'') as crefdoc,
		freffec,
		coalesce(crefser,'') as crefser,
		coalesce(crefnum,'') as crefnum,
		coalesce(ccat09,'') as ccat09,
		coalesce(cmotinc,'') as cmotinc,
		coalesce(nresp,0.0) as nresp,
		coalesce(ccodpds,'') as ccodpds,
		coalesce(nporre,0.0) as nporre,
		ffecre,
		coalesce(cnumdere,'') as cnumdere,
		coalesce(ccodpps,'') as ccodpps,
		coalesce(nporre2,0.0) as nporre2,
		coalesce(nperdenre,0.0) as nperdenre,
		coalesce(nbase1,0.0) as nbase1,
		coalesce(nigv1,0.0) as nigv1,
		coalesce(nbase2,0.0) as nbase2,
		coalesce(nigv2,0.0) as nigv2,
		coalesce(nbase3,0.0) as nbase3,
		coalesce(nigv3,0.0) as nigv3,
		coalesce(nimpicbper,0.0) as nimpicbper,
		coalesce(nina,0.0) as nina,
		coalesce(nexo,0.0) as nexo,
		coalesce(nisc,0.0) as nisc,
		coalesce(nivabase,0.0) as nivabase,
		coalesce(nivaimp,0.0) as nivaimp,
		coalesce(nimpant,0.0) as nimpant,
		coalesce(ntot,0.0) as ntot,
		estado,
		en_ambiente_de,
		es_con_migracion,
		coalesce(ccodcos3,'') as ccodcos3,
		coalesce(ccodrucanula,'') as ccodrucanula
    from json_to_recordset(a_documento)
    as t (
        iddocumento numeric,
		ccodrucemisor character(15),
		ccod_empresa character(3),
		cper character(4),
		cmes character(2),
		--
		ccodori character(3),
        ccodsu character(2),
        ccodori_p character(3),
        ccodsu_p character(2),
        ccodcue_ps character(20),
        ccodcue_pd character(20),
        ccodflu character(4),
        flgctares numeric(1,0),
        flgctaimp numeric(1,0),
        flgctaact numeric(1,0),
        flggencomp numeric(1,0),
        -- ccodtipent character(3), se repite
		--
		ccodmodulo character(6),
		ccodmov character(5),
		ccoddoc character(2),
		cserie character(20),
		cnumero character(20),
		ccodenti character(11),
		cdesenti character varying(100),
		ccodtipent character(3),
		ccodruc character(15),
		crazsoc character(150),
		cdirecc character varying(250),
		ccodubi character(6),
		ccodcontac character(3),
		cdescontacto character(150),
		ffecha date,
		ffechaven date,
		ffechaalm date,
		ccodpag character(2),
		cmoneda character(1),
		ntcigv numeric(10,6),
		cguiaser character(7),
		cguianum character(13),
		mdsc text,
		ccodvend character(4),
		ccodclas character(1),
		ccodcon character(4),
		cnumordc character(20),
		crefdoc character(2),
		freffec date,
		crefser character(10),
		crefnum character(13),
		ccat09 character(2),
		cmotinc character(50),
		nresp numeric(1,0),
		ccodpds character(5),
		nporre numeric(5,2),
		ffecre date,
		cnumdere character(15),
		ccodpps character(2),
		nporre2 numeric(5,2),
		nperdenre numeric(1,0),
		nbase1 numeric(15,2),
		nigv1 numeric(15,2),
		nbase2 numeric(15,2),
		nigv2 numeric(15,2),
		nbase3 numeric(15,2),
		nigv3 numeric(15,2) ,
		nimpicbper numeric(15,2),
		nina numeric(15,2),
		nexo numeric(15,2),
		nisc numeric(15,2),
		nivabase numeric(15,2),
		nivaimp numeric(15,2),
		nimpant numeric(15,2),
		ntot numeric(15,2),
		created_at timestamp,
		updated_at timestamp,
		estado character varying(255),
		en_ambiente_de character varying(255),
		es_con_migracion numeric(1, 0),
		ccodcos3 character(15),	
		ccodrucanula character(15)
    );
	
	-- 2. Insert detalle
	INSERT INTO public.com_detalledocumento(
		iddetalledocumento, ccodalma, ccodprod, ccodmed, ccodlote, nuniori,
		nvvori, npvori, nvalor, nigvtot, ntotori, npigv, nconvnum, nconvden,
		clibprod, ccodcos, ccodcos2, ccodpresu, cctaprod, npordscu, ndsctos,
		ccodisc, nporisc, nisc, tipo_isc, mdscl, iddocumento
	)
	select
		dd.iddetalledocumento,
		coalesce(dd.ccodalma,'') as ccodalma,
		coalesce(dd.ccodprod,'') as ccodprod,
		coalesce(dd.ccodmed,'') as ccodmed,
		coalesce(dd.ccodlote,'') as ccodlote,
		coalesce(dd.nuniori,0.0) as nuniori,
		coalesce(dd.nvvori,0.0) as nvvori,
		coalesce(dd.npvori,0.0) as npvori,
		coalesce(dd.nvalor,0.0) as nvalor,
		coalesce(dd.nigvtot,0.0) as nigvtot,
		coalesce(dd.ntotori,0.0) as ntotori,
		coalesce(dd.npigv,0.0) as npigv,
		coalesce(dd.nconvnum,0.0) as nconvnum,
		coalesce(dd.nconvden,0.0) as nconvden,
		coalesce(dd.clibprod,'') as clibprod,
		coalesce(dd.ccodcos,'') as ccodcos,
		coalesce(dd.ccodcos2,'') as ccodcos2,
		coalesce(dd.ccodpresu,'') as ccodpresu,
		coalesce(dd.cctaprod,'') as cctaprod,
		coalesce(dd.npordscu,0.0) as npordscu,
		coalesce(dd.ndsctos,0.0) as ndsctos,
		coalesce(dd.ccodisc,'') as ccodisc,
		coalesce(dd.nporisc,0.0) as nporisc,
		coalesce(dd.nisc,0.0) as nisc,
		coalesce(dd.tipo_isc,0.0) as tipo_isc,
		coalesce(dd.mdscl,'') as mdscl,
		dd.iddocumento
	from json_to_recordset(a_detalle)
    as dd (
		iddetalledocumento numeric(20,0),
		ccodalma character(3),
		ccodprod character(20),
		ccodmed character(15),
		ccodlote character(20),
		nuniori numeric(20,10),
		nvvori numeric(20,10),
		npvori numeric(20,10),
		nvalor numeric(15,2),
		nigvtot numeric(15,2),
		ntotori numeric(15,2),
		npigv numeric(5,2),
		nconvnum numeric(9,2),
		nconvden numeric(9,2),
		clibprod character(1),
		ccodcos character(9),
		ccodcos2 character(9),
		ccodpresu character(10),
		cctaprod character(20),
		npordscu numeric(15,2),
		ndsctos numeric(15,2),
		ccodisc character(5),
		nporisc numeric(5,2),
		nisc numeric(15,2),
		tipo_isc numeric(1,0),
		mdscl text,
		iddocumento integer
	);

    --3. Validar/generar registros | 01: Venta - 02: Compra
	if(ptipo='01')then
		-- perform com_ventas_integracion_principal(); -- Crear funcion...
	elsif(ptipo='02')then
		-- perform com_compras_integracion_principal(); -- Crear funcion...
	end if;

	--3.1 Test.. (Eliminar cuando las funciones anteriores (2) ya esten creadas)
    update com_documento set obserror='Test Habilitado '||iddocumento, resultado_migracion=2;

    --4. Informe de importacion    
    select json_agg(json_build_object(
        'id', t.iddocumento,
		'obserror', t.obserror,
		'es_con_migracion', t.es_con_migracion,
		'resultado_migracion', t.resultado_migracion
    ))::text
    from com_documento t
    into resultado;	
    
end; 
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;</value>
  </data>
  <data name="func_guardar_com_producto.Text" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION func_guardar_com_producto(
	OUT resultado text,
	IN pjson text
)
RETURNS text AS
$BODY$
declare 
	a_json json;
begin
    -- 0. Truncar tabla
    truncate table com_producto;
    a_json = pjson::json;
    -- 1. Importar datos
    INSERT INTO com_producto(
		idproducto, ccod_empresa, cper, cmes,
		ccodmodulo, ccodfamg, cdesfamg, ccodfamf, cdesfamf, ccodprod, cdesprod,
		cdesprodgen, ccodtes, cdesmar, ccodmed, ccodcatbs, cdescatbs, ntipoprod,
		nunidsec, npesoprod, ccodbarras, ninprod, nanuprod, nlote, nseruni, nicbper,
		nprodanti, ngasrela, nprodsafniif, ccomcue, cvencue, cdebicue, ccredcue, cdebicuei,
		ccredcuei, ccodcos, ccodcos2, ccodpresu, ccomprod, cvenprod, ccodisc, cmoneda,
		npreunit1, npreunit2, npreunit3, npreunit4, npreunit5, npreunit6, npreunit7,
		npreunit8, npreunit9, npreunit10, npreunit11, npreunit12, npreunit13, npreunit14,
		npreunit15, nstockmin, nstockmax, nrango1, nrango2, nresp, ccodpps, ccodpds,
		nagemonmin, ccodlabora, cdeslabora, estado, en_ambiente_de, es_con_migracion,
		ccodcos3
    )
    select
		idproducto, ccod_empresa, cper, cmes,
		coalesce(ccodmodulo, ''),
		coalesce(ccodfamg, ''),
		coalesce(cdesfamg, ''),
		coalesce(ccodfamf, ''),
		coalesce(cdesfamf, ''),
		coalesce(ccodprod, ''),
		coalesce(cdesprod, ''),
		coalesce(cdesprodGen, ''),
		coalesce(ccodtes, ''),
		coalesce(cdesmar, ''),
		coalesce(ccodmed, ''),
		coalesce(ccodcatbs, ''),
		coalesce(cdescatbs, ''),
		coalesce(ntipoprod, ''),
		coalesce(nunidsec, ''),
		coalesce(npesoprod, 0.00),
		coalesce(ccodbarras, ''),
		coalesce(ninprod, ''),
		coalesce(nanuprod, ''),
		coalesce(nlote, ''),
		coalesce(nseruni, ''),
		coalesce(nicbper, ''),
		coalesce(nprodanti, ''),
		coalesce(ngasrela, ''),
		coalesce(nprodsafniif, ''),
		coalesce(ccomcue, ''),
		coalesce(cvencue, ''),
		coalesce(cdebicue, ''),
		coalesce(ccredcue, ''),
		coalesce(cdebicuei, ''),
		coalesce(ccredcuei, ''),
		coalesce(ccodcos, ''),
		coalesce(ccodcos2, ''),
		coalesce(ccodpresu, ''),
		coalesce(ccomprod, ''),
		coalesce(cvenprod, ''),
		coalesce(ccodisc, ''),
		coalesce(cmoneda, ''),
		coalesce(npreunit1, 0.00),
		coalesce(npreunit2, 0.00),
		coalesce(npreunit3, 0.00),
		coalesce(npreunit4, 0.00),
		coalesce(npreunit5, 0.00),
		coalesce(npreunit6, 0.00),
		coalesce(npreunit7, 0.00),
		coalesce(npreunit8, 0.00),
		coalesce(npreunit9, 0.00),
		coalesce(npreunit10, 0.00),
		coalesce(npreunit11, 0.00),
		coalesce(npreunit12, 0.00),
		coalesce(npreunit13, 0.00),
		coalesce(npreunit14, 0.00),
		coalesce(npreunit15, 0.00),
		coalesce(nstockmin, 0.00),
		coalesce(nstockmax, 0.00),
		coalesce(nrango1, 0.00),
		coalesce(nrango2, 0.00),
		coalesce(nresp, 0.00),
		coalesce(ccodpps, ''),
		coalesce(ccodpds, ''),
		coalesce(nagemonmin, 0.00),
		coalesce(ccodlabora, ''),
		coalesce(cdeslabora, ''),
		coalesce(estado, ''),
		en_ambiente_de,
		es_con_migracion,
		coalesce(ccodcos3, '')
    from json_to_recordset(a_json)
    as t (
		idproducto numeric(20,0),
		--
		ccodrucemisor character(15),
		ccod_empresa character(3),
		cper character(4),
		cmes character(2),
		ccodmodulo character(6),
		--
		ccodfamg character(20),
		cdesfamg character(50),
		ccodfamf character(20),
		cdesfamf character(50),
		ccodprod character(20),
		cdesprod character(150),
		cdesprodGen character varying(500),
		ccodtes character(2),
		cdesmar character(80),
		ccodmed character(15),
		ccodcatbs character(8),
		cdescatbs character(100),
		ntipoprod character(8),
		nunidsec character(2),
		npesoprod numeric(10,4),
		ccodbarras character(15),
		ninprod character(2),
		nanuprod character(2),
		nlote character(2),
		nseruni character(2),
		nicbper character(2),
		nprodanti character(2),
		ngasrela character(2),
		nprodsafniif character(2),
		ccomcue character(20),
		cvencue character(20),
		cdebicue character(20),
		ccredcue character(20),
		cdebicuei character(20),
		ccredcuei character(20),
		ccodcos character(9),
		ccodcos2 character(9),
		ccodpresu character(10),
		ccomprod character(1),
		cvenprod character(1),
		ccodisc character(5),
		cmoneda character(1),
		npreunit1 numeric(15,4),
		npreunit2 numeric(15,4),
		npreunit3 numeric(15,4),
		npreunit4 numeric(15,4),
		npreunit5 numeric(15,4),
		npreunit6 numeric(15,4),
		npreunit7 numeric(15,4),
		npreunit8 numeric(15,4),
		npreunit9 numeric(15,4),
		npreunit10 numeric(15,4),
		npreunit11 numeric(15,4),
		npreunit12 numeric(15,4),
		npreunit13 numeric(15,4),
		npreunit14 numeric(15,4),
		npreunit15 numeric(15,4),
		nstockmin numeric(15,4),
		nstockmax numeric(15,4),
		nrango1 numeric(15,0),
		nrango2 numeric(15,0),
		nresp numeric(1,0),
		ccodpps character(2),
		ccodpds character(5),
		nagemonmin numeric(15,2),
		ccodlabora character(4),
		cdeslabora character(60),
		
		estado varchar(255),
		en_ambiente_de varchar(255),
		es_con_migracion numeric(1,0),
		ccodcos3 nchar(15)
    );
	--
   
	--2.1 Test.. (Eliminar cuando las funciones anteriores (2) ya esten creadas)
    update com_producto set obserror='Test Habilitado '||idproducto, resultado_migracion=2;

    --3. Informe de importacion    
    select json_agg(json_build_object(
        'id', t.idproducto,
		'obserror', t.obserror,
		'es_con_migracion', t.es_con_migracion,
		'resultado_migracion', t.resultado_migracion
    ))::text
    from com_producto t
    into resultado;	
    
end; 
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>51</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMtQAQDLUAEOy1ABRstQAZHLUAHPy1AB9ctQ
        Af/LUAH/y1AB/8tQAf/MUQH1zFEB0MxRAZbMUQFKy1ABD8xRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMtQAQDLUAEMy1ABVMtQAbbLUAHvy1AB/stQ
        Af/LUAH/zVIB/85UAv/PVgL/0FgC/9BYAv/QWAP/0FgD/9BYA/DRWQO50loDWdJbAw3SWwMAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMtQAQDLUAEAy1ABL8tQAanLUAH2y1AB/8tQ
        Af/MUQH/zlQC/9BYAv/SWgP/0lsD/9JbA//SWwP/0lsD/9JbA//SWwP/0lsD/9NaAv/UWgL31FkCrddY
        ATL/KAAA4FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADLUAEAy1ABAstQAVDLUAHYy1AB/8tQ
        Af/LUAH/zlQC/9FYA//SWwP/0lsD/9JbA//SWwP/0lsD/9JbA//SWwP/1FoD/9VcA//OYgj/w2oM/7dx
        D/+5bg7/wWgK3MhiB1TyPwAC2lQBAAAAAAAAAAAAAAAAAAAAAAAAAAAAy1ABAMtQAQHLUAFdy1AB6ctQ
        Af/LUAH/zFEB/89WAv/SWwP/0lsD/9JbA//SWwP/0lsD/9JbA//SWwP/1V0D/9hjBv/GdhL/mJUh/2mu
        L/9NuzX/Q782/0K9N/9OtTL/X6gs6ku0MV0A91YCMMM7AAAAAAAAAAAAAAAAAMtQAQDLUAEAy1ABS8tQ
        AejLUAH/y1AB/8xRAv/QWAP/0lsD/9JbA//SWwP/0lsD/9JbA//SWwP/1F0D/9tjBf/Vcg7/opck/166
        Nf83yTv/Lso7/y/JO/8wyDv/MMc8/y/HO/8wxjz/MMQ66TDDO1MwxT4AMMI5AAAAAAAAAAAAy1ABAMtQ
        ASjLUAHTy1AB/8tQAf/MUQH/0FgD/9JbA//SWwP/0lsD/9JbA//SWwP/0lsD/9ZfBP/gaAf/13QP/46d
        K/9OvDn/Msg7/zDJOv8wyTr/Mcg7/zHHOv8xxjv/McY6/zHFO/8wxDr/MMM62DDCOS4wwjkAAAAAAMtQ
        AQDLUAEHy1ABnctQAf/LUAH/y1EB/9BXAv/SWwP/0lsD/9JbA//SWwP/0lsD/9JbA//XYQX/4msJ/+Nu
        DP+fkiX/VrQ4/zO8Of8wvzr/MMM6/zDGOv8xyDv/Mcc6/zHGO/8xxjr/McU7/zDEOv8wwzr/MMI5pTHB
        OwoxwTsAy1ABAMtQAUXLUAHwy1AB/8tQAf/PVQP/0lsD/9JbA//SWwP/0lsD/9JbA//SWwP/12AF/+Jr
        Cv/mbA3/yHwZ/2utNP8/uzn/ML86/zHAOv8xwDr/MMI6/zDFO/8xxzv/McY7/zHGOv8xxTv/MMQ6/zDD
        Ov8wwjrzMcE7TTHBOwDLUAEIy1ABpctQAf/LUAH/zFIB/9FaA//SWwP/0lsD/9JbA//SWwP/0lsD/9Vd
        BP/haQr/5WwP/+VrEP+ZlSX/Urk3/zW/Of8xwTr/MMI6/zDDOv8wxDv/McU6/zHGO/8xxjv/McY6/zHF
        O/8wxDr/MMM6/zDCOv8xwTqsMb84CstQATbLUAHly1AB/8tQAf/PVwL/0lsD/9JbA//SWwP/0lsD/9Jb
        A//SWwP/3WUK/+VrEP/maw7/3HAQ/HWpL+pGvjnnMsI67zDDOvwwxDv/McU7/zHFO/8xxjv/Mcc7/zHH
        O/8xxjr/McU7/zDEOv8wwzr/MMI6/zHAOukxwDk7y1ABdstQAf3LUAH/zFIC/9FaA//SWwP/0lsD/9Jb
        A//SWwP/0lsC/9dfBf/kag3/5WsN/+VqDf/ibA/Wh54pOjzDOigwwzo3MMQ6XDHFO5sxxjvfMcc7/jHI
        O/8wyTr/Mck6/zHJO/8xxTv/MMQ6/zDDOv8wwjr/McA6/jHAOYLLUAGwy1AB/8tQAf/OVQL/0lsD/9Jb
        Av/SWwL/01wB/9NcAP/TXAD/3WUH/+VrDf/lag3/5moN/+ZpDsPmaA4P5mgOAAAAAAAxxjsAMcY7AzHH
        OygxyDuNMMk67THKOv8xyzv/Mcs7/zHIO/8wxDr/MMM6/zDCOv8xwDr/McA6vstQAdbLUAH/y1AB/9FY
        Af/TXAD/01wA/9NcAP/TXAD/01wA/9VdAf/iaAv/5moO/+ZpDv/maBD/5mgSxeZoEhDmaBIAAAAAAAAA
        AAAAAAAAMMo5AC/JOQQxyjtRMcs73DHMO/8xzTv/Mcw7/zDGOv8wwzr/MMI6/zHAOv8xvzrly1AB68tQ
        Af/MUQH/0loA/9NcAP/TXAD/01wA/9NcAP/TXAH/2GAF/+VpD//maRH/5mgS/+ZoE//mZxPa5mcTHOZn
        EwAAAAAAAAAAAAAAAAAAAAAAMcs6ADHRPAAxzDtEMc073zHOPP8xzjv/Mck7/zDDOv8wwjr/McA6/zG/
        OvvLUAH5y1AB/81TAf/TWwD/01wB/9NcAf/TXAL/010D/9NdA//bYgn/5mkS/+ZoE//maBP/5mcT/+Zm
        FPPmZhRE5mYUAAAAAAAAAAAAAAAAAAAAAAAAAAAAMc06ADHTPQAxzjxeMc879DHPO/8xzTz/MMQ6/zDC
        Ov8xwDr/Mb86/8tQAfTLUAH/zlQB/9NcAv/TXQP/010D/9NdA//TXQP/010D/91jC//maBP/5mcS/+Zn
        Ev/mZhT/5mYV/+dlFpPoYhwD52QYAAAAAAAAAAAAAAAAAAAAAAAAAAAAMc86ADHPOgky0DymMtA8/zLP
        PP8xxjr/MME6/zHAOv8xvzr/y1AB5stQAf/OVQL/010D/9NdA//TXQP/010D/9NdAv/TXQH/3WMK/+Zn
        Ev/mZxP/5mYU/+dlFf/nZBf/52QX5edjFzjnYxcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMtA7ADLQ
        O0Qy0TvyMtE7/zHIOv8wwTr/McA6/zG/OvbLUAHLy1AB/85VAv/TXQL/010C/9NeAf/TXgD/014A/9Ne
        AP/dYgn/5mYU/+ZmFf/nZRb/52QY/+dkF//nYxb/6GMWt+hiGBjoYhgAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAy0TsAMtE7DzLRPMMy0Tz/Mck7/zDBOv8xwDr/Mb862stQAZ3LUAH/zVQB/9NeAP/TXgD/014A/9Ne
        AP/TXgD/014A/9thCf/nZRX/52UX/+dkF//nZBb/6GMW/+hjF//oYhf+6GAWp+hdEx3oXhMA62IdAAAA
        AAAAAAAAAAAAADLRQQAv1DkAMdI8kTHSPP8xyjv/MME6/zHAOv8xwDquy1ABXctQAffNUwH/010A/9Ne
        Af/TXgH/014C/9NeAv/TXgL/2GAI/+ZkFv/nZBb/52MV/+hjFv/oYhf/6GEY/+hfFv/oXRP+6VsOxelX
        ClDpVAoM6VUMAAAAAAAAAAAAAAAAADLRPAAw0zxuMdI8/zHJO/8wwTr/McA6+zHAOW3LUAEgy1AB08xR
        Af/SXAP/018D/9NfA//TXwL/018C/9NfAv/VYAT/5GMT/+hjFv/oYxf/6GEY/+hgF//pXhT/6VwR/+la
        Df/pVwv/6VQJ8+lRB7npTQV06EoESelHATvpQwE+8TkAVpOFHa01zzv/MMg7/zDBOv8xwDrcMcA5KstQ
        AQDLUAGFy1AB/9BaAv/TXwL/018C/9NfAv/TXwL/018C/9NfAv/gYQ7/6GIX/+hhF//oXxX/6V4S/+lb
        EP/pWA7/6VYM/+lTCf/pUQb/6U4E/+hLBP/pRwL36UQB8OhBAfLrOwD7rG0U/zPPO/8wxjv/MME6/zHB
        OpMxvjUDy1ABAMtQASrLUAHezlYC/9NfAv/TXwL/018C/9RfAf/UYAH/1GAB/9lgCP/nYBb/6V8U/+lc
        Ev/pWhD/6VcO/+lUC//pUgj/6U8F/+lNA//pSQL/6UYC/+lDAf/oQAD/6DwA/+s2AP+Zexr/MM88/zDD
        Ov8wwjrlMcE7NTHBOwDLUAEAy1ABAMtQAXfMUgH8010B/9RgAf/UYAL/1GAC/9RgA//UYAT/1WAF/+Fe
        Dv/pWxH/6VkP/+lWDP/pVAj/6VEG/+lOBP/pSwL/6UgC/+lEAv/oQQH/6D4A/+g6AP/oNgD/5jQA/3aX
        Jf8uzDz/MMM6/TDCOYEywD0CMcE7AAAAAADLUAEAy1ABE8tQAbDQWAL/1GAE/9RgBf/UYAX/1GAE/9Rh
        A//UYQL/12AE/+ZZC//pVQr/6VIH/+lPBf/pTQP/6UoD/+lGAv/pQwH/6EAA/+g8AP/oOQD/6DUA/+kv
        AP/RQwf/TLgz/y/HO/8wwzu4MMI5FjDCOQAAAAAAAAAAAAAAAADLUAEAyk8BKM1TAsfTXgP/1GEC/9Rh
        Av/UYQH/1GEB/9RhAf/UYQH/2lwD/+dSBf/pTgX/6UsD/+lIAv/pRQH/6EIB/+g+AP/oOwD/6DcA/+gz
        AP/nLwD/6SkA/5l0Gf8zyTv/MMQ60DDDOy8wwzsAAAAAAAAAAAAAAAAAAAAAAMtQAQDLUQEAy08BL89Y
        AcfUYAH/1GEB/9RhAf/UYQH/1GEB/9RhAf/UYQH/21oB/+dMAf/pRgH/6UMB/+hAAP/oPQD/6DkA/+g1
        AP/oMQD/5y0A/+onAP/JRAr/TbUy/y/HPNAxxDo4MsQ8ADDDOwAAAAAAAAAAAAAAAAAAAAAAAAAAAMNC
        AADSXAEAzVQBJ9JeAa/UYQH71GEB/9RiAf/UYgH/1GIB/9RiAv/UYgP/2lkC/+RHAf/oPgD/6DsA/+g3
        AP/oMwD/6C8A/+grAP/qJQD/2DMF/2qaKP0vyTu5McQ7LzDFOgAyxDwAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADWZQAA018BEdRiAHTUYgLe1GID/9RiA//UYgT/1GIE/9RiA//UYwL/110B/99M
        AP/mOwD/6DEA/+gsAP/oKQD/6SQA/9czBf98hyHmMsg7gi7HOxcwxjsAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADUYgQA1GIEAdRiBCnUYgSE1GID0tRjAvfUYwH/1WMA/9Vj
        AP/VYwD/1WMA/9hbAP/eSwH/4zoC/+YrAfraLgTcj3UckzLKOjQQ3kYDJM8/AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1GIEANRiBQLUYwAe1WMAWtVj
        AJnVYwDG1WMA4tVjAO7VYwHu1WQD59VkBM7WYASm204DacFNCike40MESL81AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4AB//4AAH/4AAAf8AAAD+AAAAfgAAAHwAAAA4AAAAGAAAABAAAAAAAA
        AAAAAAAAAADgAAAA+AAAAP4AAAD/AAAAfwAAAH+AAAA/gAAAH8AAAAfAAAAAAAAAAACAAAABgAAAAcAA
        AAPgAAAH8AAAD/gAAB/8AAA//gAAf/+AAf8=
</value>
  </data>
</root>